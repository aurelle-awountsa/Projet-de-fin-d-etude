{
  "stats": {
    "suites": 19,
    "tests": 52,
    "passes": 52,
    "pending": 0,
    "failures": 0,
    "start": "2020-05-18T20:10:21.106Z",
    "end": "2020-05-18T20:10:27.954Z",
    "duration": 6848,
    "testsRegistered": 52,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9061101d-6079-4479-bea4-c2d23120a4b6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "be024cf1-0729-4c28-8594-dea510d0c8c6",
          "title": "Questions",
          "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\questions.js",
          "file": "\\server-side\\tests\\questions.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Questions \"before each\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Before each test we empty the database\n       Question.deleteMany({}, (err) => {\n           done();\n       });",
              "err": {},
              "uuid": "8705fd50-4f73-4966-9725-540ddc2b70f3",
              "parentUUID": "be024cf1-0729-4c28-8594-dea510d0c8c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "859aa184-cf16-4339-b0a5-55710460577f",
              "title": "/GET questions",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\questions.js",
              "file": "\\server-side\\tests\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET no question since there is none in the database",
                  "fullTitle": "Questions /GET questions it should GET no question since there is none in the database",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .get(`/server/api/questions`)\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(204);\n                            res.body.should.be.a('object');\n                            Object.keys(res.body).length.should.be.eql(0);\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "e8f92a34-bdfd-413a-9c8d-8867f49b4f2e",
                  "parentUUID": "859aa184-cf16-4339-b0a5-55710460577f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should get all questions",
                  "fullTitle": "Questions /GET questions it should get all questions",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const question = new Question({\n                \"type\": \"boolean\", \"question\": \"what's 2000 - 150 ?\",\n                \"answers\": [{\"option\": \"true\", \"isCorrect\": true},\n                    {\"option\": \"false\", \"isCorrect\": false}\n                ]\n            });\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .post('/server/api/questions')\n                        .send(question)\n                        .set('Authorization', res1.body.token)\n                        .end(() => {\n                            chai.request(server)\n                                .get('/server/api/questions')\n                                .set('Authorization', res1.body.token)\n                                .end((err, res2) => {\n                                    res2.should.have.status(200);\n                                    res2.body.should.be.a('array');\n                                    res2.body.length.should.be.eql(1);\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "b544bc27-ad8d-440c-a8a8-81d5ebd3d509",
                  "parentUUID": "859aa184-cf16-4339-b0a5-55710460577f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8f92a34-bdfd-413a-9c8d-8867f49b4f2e",
                "b544bc27-ad8d-440c-a8a8-81d5ebd3d509"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 282,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "90f87acd-8972-43dc-a3c4-0e342af3d6a4",
              "title": "/POST questions",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\questions.js",
              "file": "\\server-side\\tests\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST a question without a type field",
                  "fullTitle": "Questions /POST questions it should NOT POST a question without a type field",
                  "timedOut": false,
                  "duration": 164,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const question = {\n                \"question\": \"what's 2000 - 150 ?\",\n                \"answers\": [{\"option\": \"true\", \"isCorrect\": true},\n                    {\"option\": \"false\", \"isCorrect\": false}\n                ]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .post('/server/api/questions')\n                        .send(question)\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(405);\n                            res.body.should.have\n                                .property('message').eql('Invalid input');\n                            res.body.error.should.have\n                                .property('name').eql('ValidationError');\n                            res.body.error.should.have.property('errors');\n                            res.body.should.be.a('object');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "1543dd7a-4f3f-4664-923d-80eff29db699",
                  "parentUUID": "90f87acd-8972-43dc-a3c4-0e342af3d6a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a question ",
                  "fullTitle": "Questions /POST questions it should POST a question ",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const question = new Question({\n                \"type\": \"boolean\", \"question\": \"what's 2000 - 150 ?\",\n                \"answers\": [{\"option\": \"true\", \"isCorrect\": true},\n                    {\"option\": \"false\", \"isCorrect\": false}\n                ]\n            });\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .post('/server/api/questions')\n                        .send(question)\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(201);\n                            res.body.should.be.a('object');\n                            res.body.createdQuestion.should.be.a('object');\n                            res.body.should.have\n                                .property('message')\n                                .eql('Created question successfully !');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "e2e61d2b-10fd-4fa6-8164-c066dc1f68e6",
                  "parentUUID": "90f87acd-8972-43dc-a3c4-0e342af3d6a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1543dd7a-4f3f-4664-923d-80eff29db699",
                "e2e61d2b-10fd-4fa6-8164-c066dc1f68e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 276,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a8e0ce85-8aa5-49c2-99c4-967ce1b150fb",
              "title": "/GET/:id question",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\questions.js",
              "file": "\\server-side\\tests\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a question by the given id",
                  "fullTitle": "Questions /GET/:id question it should GET a question by the given id",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const question = new Question({\n                \"type\": \"boolean\",\n                \"question\": \"what's 2000 - 150 ?\",\n                \"answers\": [{\"option\": \"true\", \"isCorrect\": true},\n                    {\"option\": \"false\", \"isCorrect\": false}\n                ]\n            });\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .post('/server/api/questions')\n                        .send(question)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            const questionId = res2.body.createdQuestion.id;\n                            chai.request(server)\n                                .get(`/server/api/questions/${questionId}`)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res3) => {\n                                    res3.should.have.status(200);\n                                    res3.body[0].should.have\n                                        .property('question')\n                                        .eql(\"what's 2000 - 150 ?\");\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "217d5d06-e23d-49ef-b148-9fc0e7e6b98f",
                  "parentUUID": "a8e0ce85-8aa5-49c2-99c4-967ce1b150fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a question with a missing or invalid JWT",
                  "fullTitle": "Questions /GET/:id question it should NOT GET a question with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .get('/server/api/questions/92640se51167daq4c81f4312')\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "b933b959-9686-4443-a221-7cdc7d91beed",
                  "parentUUID": "a8e0ce85-8aa5-49c2-99c4-967ce1b150fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a question with a wrong id",
                  "fullTitle": "Questions /GET/:id question it should NOT GET a question with a wrong id",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .get('/server/api/questions/1f468dbf5082002118fc8821')\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.have\n                                .property('message')\n                                .eql('No valid entry found for provided ID');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "396f6c78-84f3-4ff4-b14a-d0eca0f5ad9e",
                  "parentUUID": "a8e0ce85-8aa5-49c2-99c4-967ce1b150fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "217d5d06-e23d-49ef-b148-9fc0e7e6b98f",
                "b933b959-9686-4443-a221-7cdc7d91beed",
                "396f6c78-84f3-4ff4-b14a-d0eca0f5ad9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 326,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c152390a-4bc9-468b-9b41-9396364ea980",
              "title": "/PATCH/:id question",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\questions.js",
              "file": "\\server-side\\tests\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT PATCH a question with a wrong id",
                  "fullTitle": "Questions /PATCH/:id question it should NOT PATCH a question with a wrong id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const question = {\n                \"type\": \"boolean\",\n                \"question\": \"what's 2000 - 150 ?\",\n                \"answers\": [{\"option\": \"true\", \"isCorrect\": true},\n                    {\"option\": \"false\", \"isCorrect\": false}\n                ]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .patch('/server/api/questions/5e97314f7cb39f58e4e21ed6')\n                        .send(question)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.be.a('object');\n                            res2.body.should.have\n                                .property('message')\n                                .eql('No valid entry found for provided ID');\n                        });\n                });\n            done();",
                  "err": {},
                  "uuid": "eced4c80-fbde-466b-acd5-7d38e9584e77",
                  "parentUUID": "c152390a-4bc9-468b-9b41-9396364ea980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should PATCH a question by the given id",
                  "fullTitle": "Questions /PATCH/:id question it should PATCH a question by the given id",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const question = new Question({\n                \"type\": \"multiple\",\n                \"question\": \"what's 22 - 150 ?\",\n                \"answers\": [{\"option\": \"true\", \"isCorrect\": true},\n                    {\"option\": \"false\", \"isCorrect\": false}\n                ]\n            });\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .post('/server/api/questions')\n                        .send(question)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            const questionId = res2.body.createdQuestion.id;\n                            question.type = \"boolean\";\n                            delete Object.values(question)[3]._id;\n                            delete Object.values(question)[3].__v;\n                            chai.request(server)\n                                .patch(`/server/api/questions/${questionId}`)\n                                .send(question)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res3) => {\n                                    res3.should.have.status(200);\n                                    res3.body.should.have.property('message').eql('Question updated successfully !');\n                                    res3.body.should.have.property('modifiedDocs').eql(1);\n                                });\n                        });\n                });\n            done();",
                  "err": {},
                  "uuid": "5e4601ac-bb38-4b9b-8a0e-733b1bee7e6f",
                  "parentUUID": "c152390a-4bc9-468b-9b41-9396364ea980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a question with a missing or invalid JWT",
                  "fullTitle": "Questions /PATCH/:id question it should NOT PATCH a question with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .patch('/server/api/questions/92640se51167daq4c81f4312')\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "f99c2169-6748-4aa6-ac88-fa40bedbb47a",
                  "parentUUID": "c152390a-4bc9-468b-9b41-9396364ea980",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eced4c80-fbde-466b-acd5-7d38e9584e77",
                "5e4601ac-bb38-4b9b-8a0e-733b1bee7e6f",
                "f99c2169-6748-4aa6-ac88-fa40bedbb47a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 110,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "32691407-ac0c-419a-8a02-130191e1c018",
              "title": "/DELETE/:id question",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\questions.js",
              "file": "\\server-side\\tests\\questions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a question by the given id",
                  "fullTitle": "Questions /DELETE/:id question it should DELETE a question by the given id",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const question = new Question({\n                \"type\": \"multiple\",\n                \"question\": \"what's 22 - 150 ?\",\n                \"answers\": [{\"option\": \"true\", \"isCorrect\": true},\n                    {\"option\": \"false\", \"isCorrect\": false}\n                ]\n            });\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .post('/server/api/questions')\n                        .send(question)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            const questionId = res2.body.createdQuestion.id;\n                            chai.request(server)\n                                .delete(`/server/api/questions/${questionId}`)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res3) => {\n                                    res3.should.have.status(200);\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "dc3603a4-8543-4777-8af4-6eef39b22537",
                  "parentUUID": "32691407-ac0c-419a-8a02-130191e1c018",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a question with a wrong id",
                  "fullTitle": "Questions /DELETE/:id question it should NOT DELETE a question with a wrong id",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .delete('/server/api/questions/1c7414e51167af71f81f4313')\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.have.property('message')\n                                .eql('No valid entry found for provided ID');\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "ca28b36b-1e2c-44d6-be74-b3f8a17a1d34",
                  "parentUUID": "32691407-ac0c-419a-8a02-130191e1c018",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc3603a4-8543-4777-8af4-6eef39b22537",
                "ca28b36b-1e2c-44d6-be74-b3f8a17a1d34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 241,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "faa1cdb8-c804-4547-9145-847893b2de86",
          "title": "Reviews",
          "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\reviews.js",
          "file": "\\server-side\\tests\\reviews.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "96d95069-2099-40ed-9cb3-d41de50d174b",
              "title": "/GET reviews",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\reviews.js",
              "file": "\\server-side\\tests\\reviews.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should get all reviews",
                  "fullTitle": "Reviews /GET reviews it should get all reviews",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n                .get('/server/api/reviews/all')\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.be.an('array');\n                    done();\n                });",
                  "err": {},
                  "uuid": "c60081c3-0755-421c-a6bf-392771b13059",
                  "parentUUID": "96d95069-2099-40ed-9cb3-d41de50d174b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c60081c3-0755-421c-a6bf-392771b13059"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 33,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "48a73222-93f5-466a-8bc1-77ee7adb6950",
              "title": "/POST review",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\reviews.js",
              "file": "\\server-side\\tests\\reviews.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create a review",
                  "fullTitle": "Reviews /POST review it should create a review",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"3\",\n                \"reviewText\": \"This is the 3rd review\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    const userId = res1.body.user.userId;\n                    chai.request(server)\n                        .post(`/server/api/user/${userId}/reviews`)\n                        .send(review)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(201);\n                            res2.body.should.have.property('message')\n                                .eql('Review created successfully !');\n                            res2.body.review.should.be.a('object');\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "b34e8d9a-68db-4dca-80a5-5c48553004c1",
                  "parentUUID": "48a73222-93f5-466a-8bc1-77ee7adb6950",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a review with a missing or invalid JWT",
                  "fullTitle": "Reviews /POST review it should NOT create a review with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"3\",\n                \"reviewText\": \"This is the 3rd review\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    const userId = res1.body.user.userId;\n                    chai.request(server)\n                        .post(`/server/api/user/${userId}/reviews`)\n                        .send(review)\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "24346e4b-daf3-4c0e-8002-0e86bbbe6d77",
                  "parentUUID": "48a73222-93f5-466a-8bc1-77ee7adb6950",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a review with a wrong user id",
                  "fullTitle": "Reviews /POST review it should NOT create a review with a wrong user id",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"3\",\n                \"reviewText\": \"This is the 3rd review\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .post('/server/api/user/1f468dbf5082002118fc8821/reviews')\n                        .send(review)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.have.property('message')\n                                .eql('No user found with the provided ID');\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "dfd32242-adbd-4270-bd6c-89df40757de9",
                  "parentUUID": "48a73222-93f5-466a-8bc1-77ee7adb6950",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b34e8d9a-68db-4dca-80a5-5c48553004c1",
                "24346e4b-daf3-4c0e-8002-0e86bbbe6d77",
                "dfd32242-adbd-4270-bd6c-89df40757de9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 310,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b29d4e48-970e-42f2-b39d-cbc4725684d9",
              "title": "/PATCH:id review",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\reviews.js",
              "file": "\\server-side\\tests\\reviews.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should PATCH a review with the given email",
                  "fullTitle": "Reviews /PATCH:id review it should PATCH a review with the given email",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"9\",\n                \"reviewText\": \"This is mocha\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    const userId = res1.body.user.userId;\n                    const userEmail = res1.body.user.userEmail;\n                    chai.request(server)\n                        .post(`/server/api/user/${userId}/reviews`)\n                        .send(review)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            const reviewId = res2.body.review._id;\n                            review.rating = \"10\";\n                            chai.request(server)\n                                .patch(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                                .send(review)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res3) => {\n                                    res3.should.have.status(200);\n                                    res3.body.should.have.property('message')\n                                        .eql('Review updated successfully !');\n                                    res2.body.review.should.be.a('object');\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "1a77b538-278f-4dc1-a1b8-fcb7f0c30048",
                  "parentUUID": "b29d4e48-970e-42f2-b39d-cbc4725684d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a review whose user is non-existent",
                  "fullTitle": "Reviews /PATCH:id review it should NOT PATCH a review whose user is non-existent",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"9\",\n                \"reviewText\": \"This is mocha\"\n            };\n            const userEmail = \"@gmail.com\";\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .patch(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                        .send(review)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.have.property('message')\n                                .eql('No user was found with provided Email');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "c7e263ab-ce31-4b6f-b7c0-d2e933df0703",
                  "parentUUID": "b29d4e48-970e-42f2-b39d-cbc4725684d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a review with a wrong id",
                  "fullTitle": "Reviews /PATCH:id review it should NOT PATCH a review with a wrong id",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"9\",\n                \"reviewText\": \"This is mocha\"\n            };\n            const userEmail = \"dan30@gmail.com\";\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .patch(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                        .send(review)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.have.property('message')\n                                .eql('No was review found with provided ID');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "4b26afe6-d471-4c05-9f5f-94796860960f",
                  "parentUUID": "b29d4e48-970e-42f2-b39d-cbc4725684d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a review with a missing or invalid JWT",
                  "fullTitle": "Reviews /PATCH:id review it should NOT PATCH a review with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"3\",\n                \"reviewText\": \"This is the 3rd review\"\n            };\n            const userEmail = \"dan30@gmail.com\";\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .patch(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                        .send(review)\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "dfc06e45-cab3-4664-bace-adae3696c1b3",
                  "parentUUID": "b29d4e48-970e-42f2-b39d-cbc4725684d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a review whose user has none",
                  "fullTitle": "Reviews /PATCH:id review it should NOT PATCH a review whose user has none",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = Math.random().toString(36).substr(2, 4);\n            const user1 = {\n                \"username\": user,\n                \"email\": `${user}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            const review = {\n                \"rating\": \"3\",\n                \"reviewText\": \"This is the 3rd review\"\n            };\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user1)\n                .end(() => {\n                    chai.request(server)\n                        .post('/server/api/login')\n                        .send({\n                            \"pseudo\": user,\n                            \"password\": \"toto\"\n                        })\n                        .end((err, res1) => {\n                            chai.request(server)\n                                .patch(`/server/api/user/${user1.email}/reviews/${reviewId}`)\n                                .set('Authorization', res1.body.token)\n                                .send(review)\n                                .end((err, res2) => {\n                                    res2.should.have.status(404);\n                                    res2.body.should.have.property('message')\n                                        .eql('No Review to update');\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "c49f7dcc-062f-4d8c-af80-7e4b439b7b7a",
                  "parentUUID": "b29d4e48-970e-42f2-b39d-cbc4725684d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a review if some request body's field(s) are not allowed",
                  "fullTitle": "Reviews /PATCH:id review it should NOT PATCH a review if some request body's field(s) are not allowed",
                  "timedOut": false,
                  "duration": 210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"9\",\n                \"reviewText\": \"This is mocha\",\n                \"reviewComment\": \"This is mocha v2\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    const userId = res1.body.user.userId;\n                    const userEmail = res1.body.user.userEmail;\n                    chai.request(server)\n                        .post(`/server/api/user/${userId}/reviews`)\n                        .send(review)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            const reviewId = res2.body.review._id;\n                            review.rating = \"10\";\n                            chai.request(server)\n                                .patch(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                                .send(review)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res3) => {\n                                    res3.should.have.status(405);\n                                    res3.body.should.have.property('message')\n                                        .eql('Some fields are NOT allowed !');\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "674dd385-e157-4306-b5a2-47e73d5964d7",
                  "parentUUID": "b29d4e48-970e-42f2-b39d-cbc4725684d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a77b538-278f-4dc1-a1b8-fcb7f0c30048",
                "c7e263ab-ce31-4b6f-b7c0-d2e933df0703",
                "4b26afe6-d471-4c05-9f5f-94796860960f",
                "dfc06e45-cab3-4664-bace-adae3696c1b3",
                "c49f7dcc-062f-4d8c-af80-7e4b439b7b7a",
                "674dd385-e157-4306-b5a2-47e73d5964d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 790,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "33a51888-0f97-4cd0-a0bd-9b22edfd0fc8",
              "title": "/DELETE:id review",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\reviews.js",
              "file": "\\server-side\\tests\\reviews.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a review with the given id",
                  "fullTitle": "Reviews /DELETE:id review it should DELETE a review with the given id",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const review = {\n                \"rating\": \"9\",\n                \"reviewText\": \"This is mocha\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    const userId = res1.body.user.userId;\n                    const userEmail = res1.body.user.userEmail;\n                    chai.request(server)\n                        .post(`/server/api/user/${userId}/reviews`)\n                        .send(review)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            const reviewId = res2.body.review._id;\n                            chai.request(server)\n                                .delete(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                                .send(review)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res3) => {\n                                    res3.should.have.status(200);\n                                    res3.body.should.have.property('message')\n                                        .eql('Review deleted successfully !');\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "3cb057d4-c27c-44af-ad00-70ec59a7833c",
                  "parentUUID": "33a51888-0f97-4cd0-a0bd-9b22edfd0fc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a review whose user is non-existent",
                  "fullTitle": "Reviews /DELETE:id review it should NOT DELETE a review whose user is non-existent",
                  "timedOut": false,
                  "duration": 149,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const userEmail = \"@gmail.com\";\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .patch(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.have.property('message')\n                                .eql('No user was found with provided Email');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "c73fdcdf-ce06-4a98-8c74-d244721aecb5",
                  "parentUUID": "33a51888-0f97-4cd0-a0bd-9b22edfd0fc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a review with a wrong id",
                  "fullTitle": "Reviews /DELETE:id review it should NOT DELETE a review with a wrong id",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const userEmail = \"dan30@gmail.com\";\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .delete(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(404);\n                            res2.body.should.have.property('message')\n                                .eql('No was review found with provided ID');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "44c924a2-4a1a-43dc-a2c2-cf5c9f04364d",
                  "parentUUID": "33a51888-0f97-4cd0-a0bd-9b22edfd0fc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a review with a missing or invalid JWT",
                  "fullTitle": "Reviews /DELETE:id review it should NOT DELETE a review with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            const userEmail = \"dan30@gmail.com\";\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .delete(`/server/api/user/${userEmail}/reviews/${reviewId}`)\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "7faf5be1-213e-463f-80ce-500bc2748a75",
                  "parentUUID": "33a51888-0f97-4cd0-a0bd-9b22edfd0fc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a review whose user has none",
                  "fullTitle": "Reviews /DELETE:id review it should NOT DELETE a review whose user has none",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = Math.random().toString(36).substr(2, 4);\n            const user1 = {\n                \"username\": user,\n                \"email\": `${user}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            const reviewId = \"1f468dbf5182002118fc8821\";\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user1)\n                .end(() => {\n                    chai.request(server)\n                        .post('/server/api/login')\n                        .send({\n                            \"pseudo\": user,\n                            \"password\": \"toto\"\n                        })\n                        .end((err, res1) => {\n                            chai.request(server)\n                                .delete(`/server/api/user/${user1.email}/reviews/${reviewId}`)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res2) => {\n                                    res2.should.have.status(404);\n                                    res2.body.should.have.property('message')\n                                        .eql('No Review to delete');\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "c155c1db-a320-4197-b3bb-63dfc34172bb",
                  "parentUUID": "33a51888-0f97-4cd0-a0bd-9b22edfd0fc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cb057d4-c27c-44af-ad00-70ec59a7833c",
                "c73fdcdf-ce06-4a98-8c74-d244721aecb5",
                "44c924a2-4a1a-43dc-a2c2-cf5c9f04364d",
                "7faf5be1-213e-463f-80ce-500bc2748a75",
                "c155c1db-a320-4197-b3bb-63dfc34172bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 576,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "960921fb-22b1-4931-8c5a-553fc65428b5",
          "title": "Users",
          "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
          "file": "\\server-side\\tests\\users..js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "921d0535-2cfc-40d7-ba85-03918583c274",
              "title": "/login user",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
              "file": "\\server-side\\tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should login a user",
                  "fullTitle": "Users /login user it should login a user",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.have\n                        .property('message')\n                        .eql('Auth successful');\n                    res.body.should.have\n                        .property('token');\n                    done();\n                });",
                  "err": {},
                  "uuid": "ac198733-b7b2-44e6-a49d-656327c2a724",
                  "parentUUID": "921d0535-2cfc-40d7-ba85-03918583c274",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT login a user with a wrong password",
                  "fullTitle": "Users /login user it should NOT login a user with a wrong password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": \"***************\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    res.should.have.status(401);\n                    res.body.should.have.property('message').eql('Auth failed');\n                    res.body.should.have.property('success').eql(false);\n                });\n            done();",
                  "err": {},
                  "uuid": "ad378e06-7cdb-4e2e-ad87-591102625058",
                  "parentUUID": "921d0535-2cfc-40d7-ba85-03918583c274",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT login a user if some required field(s) are missing",
                  "fullTitle": "Users /login user it should NOT login a user if some required field(s) are missing",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": \"admin\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.have\n                        .property('message')\n                        .eql('All fields required');\n                    done();\n                });",
                  "err": {},
                  "uuid": "d99394e4-f2e1-473c-b6a9-78ae325ad28e",
                  "parentUUID": "921d0535-2cfc-40d7-ba85-03918583c274",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac198733-b7b2-44e6-a49d-656327c2a724",
                "ad378e06-7cdb-4e2e-ad87-591102625058",
                "d99394e4-f2e1-473c-b6a9-78ae325ad28e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 195,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "acd61027-b66b-4876-9f66-81947f164de1",
              "title": "/singup user",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
              "file": "\\server-side\\tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create a user",
                  "fullTitle": "Users /singup user it should create a user",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"username\": \"dan330\",\n                \"email\": \"dan330@gmail.com\",\n                \"password\": \"toto\"\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user)\n                .end((err, res) => {\n                    res.should.have.status(201);\n                    res.body.should.have\n                        .property('message')\n                        .eql('User created successfully');\n                    res.body.should.have\n                        .property('user');\n                    User.deleteOne({username: \"dan330\"})\n                        .exec().then().catch();\n                    done();\n                });",
                  "err": {},
                  "uuid": "a552e506-aab2-4285-b6b0-14e4c540f268",
                  "parentUUID": "acd61027-b66b-4876-9f66-81947f164de1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a user if the username's length is (>= 9 && <= 4)",
                  "fullTitle": "Users /singup user it should NOT create a user if the username's length is (>= 9 && <= 4)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"username\": \"da\",\n                \"email\": \"dan330@gmail.com\",\n                \"password\": \"toto\"\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.have.property('message')\n                        .eql(\"Username's min length is 4 and max 9 !\");\n                    res.body.should.have.property('success')\n                        .eql(false);\n                    done();\n                });",
                  "err": {},
                  "uuid": "45df6178-5d26-44f3-b2db-6dfd1b7d1879",
                  "parentUUID": "acd61027-b66b-4876-9f66-81947f164de1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a user if some required field(s) are missing",
                  "fullTitle": "Users /singup user it should NOT create a user if some required field(s) are missing",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"username\": \"dan330\",\n                \"email\": \"dan330@gmail.com\",\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.have\n                        .property('message')\n                        .eql('All fields required');\n                    done();\n                });",
                  "err": {},
                  "uuid": "5b84074b-6552-4844-a133-2659b6ff4421",
                  "parentUUID": "acd61027-b66b-4876-9f66-81947f164de1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT create a user if he/she already exists",
                  "fullTitle": "Users /singup user it should NOT create a user if he/she already exists",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"username\": \"admin\",\n                \"email\": \"admin10@gmail.com\",\n                \"password\": \"***********************\"\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user)\n                .end((err, res) => {\n                    res.should.have.status(409);\n                    res.body.should.have\n                        .property('success')\n                        .eql(false);\n                    res.body.should.have\n                        .property('message')\n                        .eql('Mail or Username already exists !');\n                    done();\n                });",
                  "err": {},
                  "uuid": "f3f1a038-3ee2-4758-93dc-26dcd0f14545",
                  "parentUUID": "acd61027-b66b-4876-9f66-81947f164de1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a552e506-aab2-4285-b6b0-14e4c540f268",
                "45df6178-5d26-44f3-b2db-6dfd1b7d1879",
                "5b84074b-6552-4844-a133-2659b6ff4421",
                "f3f1a038-3ee2-4758-93dc-26dcd0f14545"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6c8923a1-8410-4e24-ae21-762787e2652c",
              "title": "/GET users",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
              "file": "\\server-side\\tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET all users",
                  "fullTitle": "Users /GET users it should GET all users",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .get('/server/api/users/profiles')\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(200);\n                            res.body.should.be.an('array');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "c65ac41a-2bee-4ce1-8de2-345df02061a7",
                  "parentUUID": "6c8923a1-8410-4e24-ae21-762787e2652c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET all user with a missing or invalid JWT",
                  "fullTitle": "Users /GET users it should NOT GET all user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .get('/server/api/users/profiles')\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "e73e748c-7fe0-45bf-aa35-af21376ddaca",
                  "parentUUID": "6c8923a1-8410-4e24-ae21-762787e2652c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET all users if the request is sent by a student",
                  "fullTitle": "Users /GET users it should NOT GET all users if the request is sent by a student",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": \"dan30\",\n                \"password\": \"toto\"\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .get('/server/api/users/profiles')\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(403);\n                            res.body.should.have\n                                .property('message')\n                                .eql(\"You don't have enough permission to perform this action\");\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "dfef988b-1c92-4c74-9b23-e9075d3aab2a",
                  "parentUUID": "6c8923a1-8410-4e24-ae21-762787e2652c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c65ac41a-2bee-4ce1-8de2-345df02061a7",
                "e73e748c-7fe0-45bf-aa35-af21376ddaca",
                "dfef988b-1c92-4c74-9b23-e9075d3aab2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 321,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "468444d7-095c-4161-a5d6-56bbc758e7f2",
              "title": "/GET/:id user",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
              "file": "\\server-side\\tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a user by id",
                  "fullTitle": "Users /GET/:id user it should GET a user by id",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .get(`/server/api/user/${process.env.ADMIN_ID}`)\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(200);\n                            res.body.should.be.an('object');\n                            res.body.should.have\n                                .property('user');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "1d1b678b-badf-4d4f-9a17-6417df590d33",
                  "parentUUID": "468444d7-095c-4161-a5d6-56bbc758e7f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a user by a wrong id",
                  "fullTitle": "Users /GET/:id user it should NOT GET a user by a wrong id",
                  "timedOut": false,
                  "duration": 156,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .get(`/server/api/user/7e7fd1d5f71b123cbc246700`)\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(404);\n                            res.body.should.be.an('object');\n                            res.body.should.have\n                                .property('message')\n                                .eql('No valid entry found for provided ID');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "1e10e37b-ae82-42f1-af7d-5b10ad1c19e3",
                  "parentUUID": "468444d7-095c-4161-a5d6-56bbc758e7f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT GET a user with a missing or invalid JWT",
                  "fullTitle": "Users /GET/:id user it should NOT GET a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .get('/server/api/user/1f468dbf5182002118fc8821')\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "7e9d06bb-3ccd-4238-9798-84c284d24e3a",
                  "parentUUID": "468444d7-095c-4161-a5d6-56bbc758e7f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should check that a student can't get/see another student's profile",
                  "fullTitle": "Users /GET/:id user it should check that a student can't get/see another student's profile",
                  "timedOut": false,
                  "duration": 369,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = Math.random().toString(36).substr(2, 4);\n            const user0 = Math.random().toString(36).substr(2, 4);\n            const user1 = {\n                \"username\": user,\n                \"email\": `${user}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            const user2 = {\n                \"username\": user0,\n                \"email\": `${user0}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user1)\n                .end(() => {\n                    chai.request(server)\n                        .post('/server/api/signup')\n                        .send(user2)\n                        .end((err, res2) => {\n                            chai.request(server)\n                                .post('/server/api/login')\n                                .send({\n                                    \"pseudo\": user,\n                                    \"password\": \"toto\"\n                                })\n                                .end((err, res3) => {\n                                    chai.request(server)\n                                        .get(`/server/api/user/${res2.body.user.userId}`)\n                                        .set('Authorization', res3.body.token)\n                                        .end((err, res3) => {\n                                            res3.should.have.status(403);\n                                            res3.body.should.have\n                                                .property('message')\n                                                .eql(\"You don't have enough permission to perform this action !\");\n                                            done();\n                                        });\n                                });\n                        });\n                });",
                  "err": {},
                  "uuid": "d93271f5-32a4-449c-b47e-5e092991702e",
                  "parentUUID": "468444d7-095c-4161-a5d6-56bbc758e7f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d1b678b-badf-4d4f-9a17-6417df590d33",
                "1e10e37b-ae82-42f1-af7d-5b10ad1c19e3",
                "7e9d06bb-3ccd-4238-9798-84c284d24e3a",
                "d93271f5-32a4-449c-b47e-5e092991702e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 780,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1a16095d-b01f-40b9-8639-8b8cc1834abb",
              "title": "/PATCH/:id user",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
              "file": "\\server-side\\tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should PATCH a user by id",
                  "fullTitle": "Users /PATCH/:id user it should PATCH a user by id",
                  "timedOut": false,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    delete user.pseudo;\n                    user.email = `${process.env[\"ADMIN_PSEUDO\"]}@gmail.com`;\n                    chai.request(server)\n                        .patch(`/server/api/user/${process.env.ADMIN_ID}`)\n                        .set('Authorization', res.body.token)\n                        .send(user)\n                        .end((err, res) => {\n                            res.should.have.status(200);\n                            res.body.should.have\n                                .property('message')\n                                .eql('User info updated successfully');\n                            res.body.should.have\n                                .property('modifiedDocs')\n                                .eql(1);\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "20ab6626-ef73-4768-8d60-23d9c9a8ef1b",
                  "parentUUID": "1a16095d-b01f-40b9-8639-8b8cc1834abb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user by a wrong id",
                  "fullTitle": "Users /PATCH/:id user it should NOT PATCH a user by a wrong id",
                  "timedOut": false,
                  "duration": 206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    delete user.pseudo;\n                    chai.request(server)\n                        .patch(`/server/api/user/7e7fd1d5f71b123cbc246700`)\n                        .set('Authorization', res.body.token)\n                        .send(user)\n                        .end((err, res) => {\n                            res.should.have.status(404);\n                            res.body.should.have\n                                .property('message')\n                                .eql('No valid entry found for provided ID');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "5689ced8-2f09-46f9-bbb8-8d69f1ed92be",
                  "parentUUID": "1a16095d-b01f-40b9-8639-8b8cc1834abb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user with a missing or invalid JWT",
                  "fullTitle": "Users /PATCH/:id user it should NOT PATCH a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 133,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .patch('/server/api/user/1f468dbf5182002118fc8821')\n                        .send(user)\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "203d8ede-5482-4f50-8fb0-e7a6ea7f1562",
                  "parentUUID": "1a16095d-b01f-40b9-8639-8b8cc1834abb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should check that a student can't update another student's profile",
                  "fullTitle": "Users /PATCH/:id user it should check that a student can't update another student's profile",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = Math.random().toString(36).substr(2, 4);\n            const user0 = Math.random().toString(36).substr(2, 4);\n            const user1 = {\n                \"username\": user,\n                \"email\": `${user}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            const user2 = {\n                \"username\": user0,\n                \"email\": `${user0}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user1)\n                .end(() => {\n                    chai.request(server)\n                        .post('/server/api/signup')\n                        .send(user2)\n                        .end((err, res2) => {\n                            chai.request(server)\n                                .post('/server/api/login')\n                                .send({\n                                    \"pseudo\": user,\n                                    \"password\": \"toto\"\n                                })\n                                .end((err, res3) => {\n                                    chai.request(server)\n                                        .patch(`/server/api/user/${res2.body.user.userId}`)\n                                        .set('Authorization', res3.body.token)\n                                        .end((err, res3) => {\n                                            res3.should.have.status(403);\n                                            res3.body.should.have\n                                                .property('message')\n                                                .eql(\"You don't have enough permission to perform this action !\");\n                                            done();\n                                        });\n                                });\n                        });\n                });",
                  "err": {},
                  "uuid": "f296abbd-e53e-4588-9838-26d3afba6bd8",
                  "parentUUID": "1a16095d-b01f-40b9-8639-8b8cc1834abb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH a user if request body contains unallowed fields",
                  "fullTitle": "Users /PATCH/:id user it should NOT PATCH a user if request body contains unallowed fields",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    user.phone = \"0815713693\";\n                    chai.request(server)\n                        .patch(`/server/api/user/${process.env.ADMIN_ID}`)\n                        .set('Authorization', res.body.token)\n                        .send(user)\n                        .end((err, res) => {\n                            res.should.have.status(405);\n                            res.body.should.have\n                                .property('message')\n                                .eql('Some fields are NOT allowed');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "ed6b533d-25cc-4891-affd-d1d9720aaa2c",
                  "parentUUID": "1a16095d-b01f-40b9-8639-8b8cc1834abb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20ab6626-ef73-4768-8d60-23d9c9a8ef1b",
                "5689ced8-2f09-46f9-bbb8-8d69f1ed92be",
                "203d8ede-5482-4f50-8fb0-e7a6ea7f1562",
                "f296abbd-e53e-4588-9838-26d3afba6bd8",
                "ed6b533d-25cc-4891-affd-d1d9720aaa2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 938,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "69c4ebd0-1d64-4262-9e6c-93c212f544f9",
              "title": "/DELETE/:id user",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
              "file": "\\server-side\\tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a user by id",
                  "fullTitle": "Users /DELETE/:id user it should DELETE a user by id",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = Math.random().toString(36).substr(2, 4);\n            const user1 = {\n                \"username\": user,\n                \"email\": `${user}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user1)\n                .end(() => {\n                    chai.request(server)\n                        .post('/server/api/login')\n                        .send({\n                            \"pseudo\": user,\n                            \"password\": \"toto\"\n                        })\n                        .end((err, res1) => {\n                            chai.request(server)\n                                .delete(`/server/api/user/${res1.body.user.userId}`)\n                                .set('Authorization', res1.body.token)\n                                .end((err, res2) => {\n                                    res2.should.have.status(200);\n                                    res2.body.should.have\n                                        .property('message')\n                                        .eql('User deleted successfully !');\n                                    done();\n                                });\n                        });\n                });",
                  "err": {},
                  "uuid": "42eeaff6-91a2-46b0-947f-a49146179162",
                  "parentUUID": "69c4ebd0-1d64-4262-9e6c-93c212f544f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a user by a wrong id",
                  "fullTitle": "Users /DELETE/:id user it should NOT DELETE a user by a wrong id",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res) => {\n                    chai.request(server)\n                        .delete(`/server/api/user/7e7fd1d5f71b123cbc246700`)\n                        .set('Authorization', res.body.token)\n                        .end((err, res) => {\n                            res.should.have.status(404);\n                            res.body.should.have\n                                .property('message')\n                                .eql('No user found for the provided ID');\n                            done();\n                        });\n                });",
                  "err": {},
                  "uuid": "d76a3882-5a25-46fc-951d-768bcbba544b",
                  "parentUUID": "69c4ebd0-1d64-4262-9e6c-93c212f544f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT DELETE a user with a missing or invalid JWT",
                  "fullTitle": "Users /DELETE/:id user it should NOT DELETE a user with a missing or invalid JWT",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end(() => {\n                    chai.request(server)\n                        .delete('/server/api/user/1f468dbf5182002118fc8821')\n                        .end((err, res2) => {\n                            res2.should.have.status(401);\n                            Object.keys(res2.body).length.should.be.eql(0);\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "9cd5d18e-e199-4c7d-9c7c-985fbfd9f066",
                  "parentUUID": "69c4ebd0-1d64-4262-9e6c-93c212f544f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should check that a student can't delete another student's profile",
                  "fullTitle": "Users /DELETE/:id user it should check that a student can't delete another student's profile",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = Math.random().toString(36).substr(2, 4);\n            const user0 = Math.random().toString(36).substr(2, 4);\n            const user1 = {\n                \"username\": user,\n                \"email\": `${user}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            const user2 = {\n                \"username\": user0,\n                \"email\": `${user0}@gmail.com`,\n                \"password\": \"toto\"\n            };\n            chai.request(server)\n                .post('/server/api/signup')\n                .send(user1)\n                .end(() => {\n                    chai.request(server)\n                        .post('/server/api/signup')\n                        .send(user2)\n                        .end((err, res2) => {\n                            chai.request(server)\n                                .post('/server/api/login')\n                                .send({\n                                    \"pseudo\": user,\n                                    \"password\": \"toto\"\n                                })\n                                .end((err, res3) => {\n                                    chai.request(server)\n                                        .delete(`/server/api/user/${res2.body.user.userId}`)\n                                        .set('Authorization', res3.body.token)\n                                        .end((err, res3) => {\n                                            res3.should.have.status(403);\n                                            res3.body.should.have\n                                                .property('message')\n                                                .eql(\"You don't have enough permission to perform this action !\");\n                                        });\n                                });\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "594dcebf-66ee-4ef7-ac66-2c41e4c2717e",
                  "parentUUID": "69c4ebd0-1d64-4262-9e6c-93c212f544f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42eeaff6-91a2-46b0-947f-a49146179162",
                "d76a3882-5a25-46fc-951d-768bcbba544b",
                "9cd5d18e-e199-4c7d-9c7c-985fbfd9f066",
                "594dcebf-66ee-4ef7-ac66-2c41e4c2717e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 552,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "da3cc058-383e-4ae9-b9ff-49c281dd7edb",
              "title": "/PATCH/:id/score",
              "fullFile": "C:\\Users\\morga\\Documents\\mean-stack-web-app\\server-side\\tests\\users..js",
              "file": "\\server-side\\tests\\users..js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should PATCH the user's score ",
                  "fullTitle": "Users /PATCH/:id/score it should PATCH the user's score ",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .patch(`/server/api/user/${res1.body.user.userId}/score`)\n                        .send({ \"score\" : 10})\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(200);\n                            res2.body.should.have\n                                .property('message')\n                                .eql('User info updated successfully');\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "cffd7054-091f-4c2c-861f-9f057803a0ba",
                  "parentUUID": "da3cc058-383e-4ae9-b9ff-49c281dd7edb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT PATCH the user's score if it exceeds 10",
                  "fullTitle": "Users /PATCH/:id/score it should NOT PATCH the user's score if it exceeds 10",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = {\n                \"pseudo\": process.env[\"ADMIN_PSEUDO\"],\n                \"password\": process.env[\"ADMIN_PSD\"]\n            };\n            chai.request(server)\n                .post('/server/api/login')\n                .send(user)\n                .end((err, res1) => {\n                    chai.request(server)\n                        .patch(`/server/api/user/${res1.body.user.userId}/score`)\n                        .send({ \"score\" : 123})\n                        .set('Authorization', res1.body.token)\n                        .end((err, res2) => {\n                            res2.should.have.status(405);\n                            res2.body.should.have\n                                .property('message')\n                                .eql('The max score is 10');\n                        });\n                    done();\n                });",
                  "err": {},
                  "uuid": "010f1732-855a-4729-b73d-a0a629f00f7b",
                  "parentUUID": "da3cc058-383e-4ae9-b9ff-49c281dd7edb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cffd7054-091f-4c2c-861f-9f057803a0ba",
                "010f1732-855a-4729-b73d-a0a629f00f7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 198,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "report-mocha",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}