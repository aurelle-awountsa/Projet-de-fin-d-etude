{"version":3,"sources":["webpack:///src/app/features/components/reviews/reviews.component.ts","webpack:///src/app/features/components/reviews/reviews.component.html","webpack:///src/app/features/components/register/register.component.html","webpack:///src/app/features/components/register/register.component.ts","webpack:///src/app/features/components/appointment/appointment.component.ts","webpack:///src/app/features/components/appointment/appointment.component.html","webpack:///src/app/features/components/register/verify-email/verify-email.component.ts","webpack:///src/app/features/components/register/verify-email/verify-email.component.html","webpack:///src/app/features/components/profile/profile.component.ts","webpack:///src/app/features/components/profile/profile.component.html","webpack:///src/app/features/components/login/login.component.ts","webpack:///src/app/features/components/login/login.component.html","webpack:///src/app/features/features.module.ts","webpack:///src/app/features/components/questions/results/results.component.ts","webpack:///src/app/features/components/questions/results/results.component.html","webpack:///src/app/features/components/questions/questions.component.html","webpack:///src/app/features/components/questions/questions.component.ts"],"names":["ReviewsComponent","toastService","authService","reviews","readonly","page","alertMessage","loggedInUser","JSON","parse","localStorage","getItem","username","loggedInUserRole","showReviews","tab","getAllReviews","toPromise","then","data","message","rev","userId","_id","sort","a","b","Date","created","forEach","x","rating","Number","imageNumber","Math","round","random","updated","getTime","date","totalItems","length","err","console","log","review","currentRate","reviewText","createReview","event","updateId","id","reviewAuthor","title","name","deleteId","deleteReview","updateReview","onReviewCreate","onUpdateReview","closeAlert","choose","onDeleteReview","selector","templateUrl","styleUrls","RegisterComponent","validateService","router","emailPattern","user","email","password","validateRegister","show","INFO","setTimeout","navigate","registerUser","stringify","subscribe","userEmail","error","ERROR","onRegisterSubmit","AppointmentComponent","dialogService","bookingService","events","Object","keys","includes","options","plugins","defaultDate","toISOString","header","left","center","right","getBookings","fc","clickedTeacherBooking","tagName","target","innerHTML","split","charAt","target1","openConfirmationDialog","getTeacherBookings","showEvents","bookingIndex","booking","find","u","bookingTosave","start","end","ref","open","substring","onClose","pipe","confirm","addUserBooking","SUCCESS","bookings","i","state","color","push","getClikedDate","VerifyEmailComponent","route","key","resendmessage","resendEmail","snapshot","paramMap","get","confirmEmail","isVerified","success","ProfileComponent","getUserProfile","getAllProfiles","undefined","logout","getProfile","profile","updateUser","onUpdateUser","LoginComponent","pseudo","validateLogin","WARN","loginUser","timeLoggedIn","sessionExpired","token","storeUserData","role","expirationDate","getTokenExpirationDate","onLoginSubmit","appRoutes","path","pathMatch","component","FeaturesModule","forChild","declarations","imports","exports","providers","ResultsComponent","questions","userScore","correctAnswerCount","updateScore","getLevel","description","getLevelDescription","level","QuestionsComponent","question","replacePipe","formBuilder","progress","dynamicInputsForm","group","inputs","qnProgress","seconds","showQuestion","startTimer","getQuestions","filter","type","regexAnswer","getAnswer","transform","questionNumber","qns","numberOfInputs","getInputs","required","removeAt","t","t1","value","y","toLocaleLowerCase","fill","answers","option","compareTwoArray","timeTaken","displayTimeElapsed","clearInterval","timer","t2","setInterval","setItem","toString","index","choice","answer","compArray","controls","getDynamicInputsForm"],"mappings":"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","file":"features-features-module-es5.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"@app/core/services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {ReviewsService} from \"@app/core/services/reviews.service\";\nimport {ToastService} from \"@app/core/services/toast.service\";\n\n@Component({\n  selector: 'app-reviews',\n  templateUrl: './reviews.component.html',\n  styleUrls: ['./reviews.component.css']\n})\nexport class ReviewsComponent implements OnInit {\n\n  title: string;\n  currentRate: number;\n  reviewText: string;\n\n  readonly: boolean = true;\n  deleteId: any;\n  loggedInUser: any;\n\n  loggedInUserRole: any;\n  updateId: any;\n  date: any;\n\n  reviewAuthor: any;\n\n  totalItems: number;\n  page: number = 1;\n\n  alertMessage: string = \"\";\n\n  constructor(\n    public toastService: ToastService,\n    public authService: AuthService,\n    public reviews: ReviewsService\n  ) {\n  }\n\n  ngOnInit() {\n\n    this.loggedInUser = !(JSON.parse(localStorage.getItem('user'))) ?\n      \"\" : JSON.parse(localStorage.getItem('user')).username;\n\n    this.loggedInUserRole = !(localStorage.getItem('role')) ?\n      \"\" : localStorage.getItem('role');\n    this.showReviews();\n  }\n\n  showReviews() {\n    let tab: Array<any> = [];\n    this.reviews.getAllReviews()\n      .toPromise()\n      .then((data: any) => {\n\n        if (data.message) return this.reviews.rev;\n\n        this.reviews.userId = data._id;\n        data\n          .sort((a, b) => Date.parse(b.created) - Date.parse(a.created))\n          .forEach(x => {\n            x.rating = Number(x.rating);\n            x.imageNumber = Math.round(Math.random() * 14);\n\n            (new Date(x.updated).getTime() > new Date(x.created).getTime()) ?\n              x.date = `Updated ${x.updated}` :\n              x.date = `Created ${x.created}`;\n\n          });\n        this.reviews.rev = data;\n        this.totalItems = this.reviews.rev.length;\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  onReviewCreate() {\n    const review = {\n      \"rating\": this.currentRate,\n      \"reviewText\": this.reviewText\n    };\n\n    this.reviews.createReview(review)\n      .toPromise()\n      .then((data: any) => {\n        this.showReviews();\n        this.alertMessage = data.message;\n      })\n      .catch(err => {\n        this.alertMessage = \"Something went wrong !\";\n        console.log(err);\n      });\n\n  }\n\n  chooseModalTitle(event) {\n    this.updateId = event.id;\n    this.reviewAuthor = event.title;\n    (event.name === 'createReview') ? this.title = 'Create a new review'\n      : this.title = 'Update this review';\n  }\n\n  getDeleteId(event) {\n    this.reviewAuthor = event.id;\n    this.deleteId = event.title;\n  }\n\n  onDeleteReview() {\n    if (!localStorage.getItem('id_token')) {\n      this.alertMessage = \"Something went wrong !\";\n    } else {\n      this.reviews.deleteReview(this.reviewAuthor, this.deleteId)\n        .toPromise()\n        .then((data: any) => {\n          this.showReviews();\n          this.alertMessage = `${data.message}`;\n        })\n        .catch(err => {\n          this.alertMessage = \"Something went wrong !\";\n          console.log(err);\n        })\n    }\n  }\n\n  onUpdateReview() {\n\n    const review = {\n      \"rating\": this.currentRate,\n      \"reviewText\": this.reviewText\n    };\n\n    if (!localStorage.getItem('id_token')) {\n      this.alertMessage = \"Something went wrong !\";\n    } else {\n      this.reviews.updateReview(this.reviewAuthor, this.updateId, review)\n        .toPromise()\n        .then(() => {\n          this.showReviews();\n          this.alertMessage = \"Review updated successfully !\";\n        })\n        .catch(err => {\n          this.alertMessage = \"Something went wrong !\";\n          console.log(err);\n        });\n    }\n  }\n\n  choose() {\n    if (this.title === 'Create a new review') {\n      this.onReviewCreate();\n\n    } else if (this.title === 'Update this review') {\n      this.onUpdateReview();\n    }\n  }\n\n  closeAlert() {\n    this.alertMessage = \"\";\n  }\n\n  checkTokens() {\n    return !localStorage.getItem('id_token');\n  }\n\n}\n","<div *ngIf=\"reviews.rev\">\n\n  <div class=\"d-flex justify-content-center align-items-center\">\n    <div class=\"container m-5 p-5 border border-bottom\">\n\n      <!-- Add a review button -->\n      <div *ngIf=\"!checkTokens()\" class=\"row\">\n        <div class=\"col-md-12 text-center\">\n          <button (click)=\"chooseModalTitle($event.target)\" name=\"createReview\" type=\"submit\"\n                  class=\"btn btn-outline-success\n                  text-center text-monospace font-italic font-weight-bolder\"\n                  data-toggle=\"modal\" id=\"addReviewBtn\"\n                  data-target=\"#addReviewModel\" data-whatever=\"@mdo\">Add a review\n          </button>\n        </div>\n      </div>\n      <!-- Show all reviews section -->\n      <section>\n        <br>\n        <div id=\"comments\" class=\"text-center font-weight-bold\">\n          <span>{{(reviews.rev).length}}</span> {{ 'REVIEW.TITLE' | translate }}\n        </div>\n\n        <!-- Loop through all reviews and paginate -->\n        <ng-container *ngFor=\"let review of reviews.rev | paginate:\n                                                    { id: 'reviewsPagination',\n                                                        itemsPerPage: 4,\n                                                        currentPage: page,\n                                                        totalItems: totalItems };\n                                                        let i = index\">\n          <div class=\"media d-block d-md-flex mt-4\">\n\n            <!-- user image -->\n\n              <img *ngIf=\"i <= 19\" src=\"../../../../assets/img/{{review['author']}}.jpg\"\n                   class=\"card-img-64 d-flex mx-auto mb-3 rounded-circle\" style=\"width: 12%\" alt=\"\">\n\n              <img *ngIf=\"i > 19\" src=\"../../../../assets/img/no-profile.png\"\n                   class=\"card-img-64 d-flex mx-auto mb-3\" style=\"width: 10%\" alt=\"\">\n\n            <!-- user/review info -->\n            <div class=\"media-body text-center text-md-left ml-md-3 ml-0\">\n\n\n              <div id=\"test\" class=\"font-weight-bold my-0\">\n\n                <!-- review author -->\n                <div class=\"d-flex justify-content-between\">\n                  <div>\n                    {{review[\"author\"]}}\n                    <i class=\"fa fa-check-circle\" style=\"color: dodgerblue\"\n                    title=\"Verified Account\"></i>\n                  </div>\n\n                  <span *ngIf=\"review['author'] === loggedInUser || loggedInUserRole === 'admin'\n                      || loggedInUserRole === 'teacher'\">\n\n                    <!-- Select a title for update & create review modal -->\n                     <a *ngIf=\"!checkTokens()\"\n                       class=\"\" (click)=\"chooseModalTitle($event.target)\"\n                        data-toggle=\"modal\" data-target=\"#addReviewModel\"\n                        data-whatever=\"@mdo\">\n\n                      <!-- update review icon -->\n                       <i id=\"{{review['_id']}}\" name=\"updateReview\"\n                          title=\"{{review['author']}}\" class=\"fa fa-pencil\"\n                          aria-hidden=\"true\" onmousemove=\"this.style.cursor = 'pointer';\n                       this.style.fontSize= '1.5vh'\"\n                          onmouseout=\"this.style.fontSize= ''\" style=\"color: blue\"></i>\n                     </a>\n\n                    <!-- delete review a tag -->\n                    <a  *ngIf=\"!checkTokens()\"\n                      class=\"ml-3\" (click)=\"getDeleteId($event.target)\" data-toggle=\"modal\"\n                        data-target=\"#deleteModel\" data-whatever=\"@mdo\">\n\n                      <!-- delete review icon -->\n                      <i title=\"{{review['_id']}}\" id=\"{{review['author']}}\" class=\"fa fa-trash\"\n                         aria-hidden=\"true\" onmousemove=\"this.style.cursor = 'pointer';\n                       this.style.fontSize= '1.5vh'\" onmouseout=\"this.style.fontSize= ''\"\n                         style=\"color: red\" name=\"deleteReview\"></i>\n                    </a>\n                  </span>\n                </div>\n\n                <!-- Riview rating -->\n                {{ 'REVIEW.RATING' | translate }} :\n                <ngb-rating [(rate)]='review[\"rating\"]' [readonly]=\"readonly\"\n                            [max]=\"5\"></ngb-rating>\n              </div>\n\n              <!-- review date / time -->\n              <p class=\"blockquote-footer my-0\">\n               {{review[\"date\"] | slice:0:7}}\n                {{review[\"date\"] | date}}\n              </p>\n\n              <!-- review text -->\n              {{review[\"reviewText\"]}}\n            </div>\n          </div>\n          <hr>\n        </ng-container>\n      </section>\n\n      <!-- review pagination controls -->\n      <div class=\"pagination justify-content-center pagination-lg\">\n        <pagination-controls id=\"reviewsPagination\"\n                             (pageChange)=\"page = ($event)\"\n                             maxSize=\"{{totalItems}}\"\n                             directionLinks=\"true\"\n                             autoHide=\"true\"\n                             responsive=\"true\"\n                             previousLabel=\"Previous\"\n                             nextLabel=\"Next\"\n                             screenReaderPaginationLabel=\"Pagination\"\n                             screenReaderPageLabel=\"page\"\n                             screenReaderCurrentLabel=\"You're on page\">\n        </pagination-controls>\n      </div>\n    </div>\n  </div>\n\n</div>\n\n\n<!-- Create/Update review modal -->\n<div class=\"modal fade\" id=\"addReviewModel\" tabindex=\"-1\" role=\"dialog\"\n     aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\">\n\n      <!-- create/update review modal header -->\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title text-monospace font-italic font-weight-bolder\"\n            id=\"exampleModalLabel\">{{title}}</h5>\n\n        <!-- create/update review close modal button -->\n        <button (click)=\"closeAlert()\" type=\"button\" class=\"close\"\n                data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <!-- create/update review modal body -->\n      <div class=\"modal-body\">\n\n        <!-- create/update review form -->\n        <form #reviewForm=\"ngForm\" action=\"\" class=\"my-form\" (submit)=\"choose()\">\n\n          <!-- create/update review card -->\n          <div class=\"card\" style=\"width: 29rem;\">\n\n            <!-- create/update review card -->\n            <div class=\"card-header\">\n              <p class=\"font-weight-bold text-monospace font-italic\n              font-weight-bolder\">Rating :\n                <ngb-rating [(rate)]=\"currentRate\" [max]=\"5\"></ngb-rating>\n              </p>\n            </div>\n\n            <!-- create/update review rating input -->\n            <div class=\"list-group list-group-flush\">\n              <div class=\"list-group-item\">\n                <label for=\"inputRating\">\n                  <input #rateInput=\"ngModel\" [class.is-invalid]=\"rateInput.invalid &&\n                    rateInput.touched\" class=\"form-control\"\n                         [(ngModel)]=\"currentRate\" type=\"number\" id=\"inputRating\"\n                         name=\"currentRate\" style=\"width: 67px; height: 35px\" required>\n                </label>\n                out of 10\n                <p class=\"font-weight-bold text-monospace font-italic font-weight-bolder\">\n                  Rate: <b style=\"color: lightseagreen\"> {{currentRate}}</b>\n                </p>\n              </div>\n              <div class=\"list-group-item\">\n                <label class=\"font-weight-bold text-monospace font-italic\"\n                       for=\"reviewComment\">Your comment</label>\n\n                <!-- review textarea -->\n                <textarea #textArea=\"ngModel\"\n                          [class.is-invalid]=\"textArea.invalid && textArea.touched\"\n                          class=\"form-control w-100\" id=\"reviewComment\" rows=\"4\"\n                          [class.is-valid]=\"!(textArea.invalid && textArea.untouched)\"\n                          [(ngModel)]=\"reviewText\" name=\"reviewText\" required></textarea>\n                <small class=\"text-danger\" [class.d-none]=\"textArea.valid ||\n                textArea.untouched\">Review Text is required</small>\n              </div>\n            </div>\n          </div>\n          <br>\n          <!-- create/update review modal footer -->\n          <div class=\"modal-footer\">\n\n            <!-- update/create review success submit message -->\n            <span *ngIf=\"alertMessage.length > 1 && !(alertMessage.includes('wrong'))\"\n                  style=\"color: green; margin-right: 50px\" id=\"createSuccess\">\n              {{alertMessage}}\n            </span>\n\n            <!-- update/create review failed submit message -->\n            <span *ngIf=\"alertMessage.includes('wrong')\"\n                  style=\"color: red; margin-right: 90px\" id=\"createFail\">\n              {{alertMessage}}\n            </span>\n\n            <!-- update/create review close button -->\n            <button (click)=\"closeAlert()\" type=\"button\"\n                    class=\"btn btn-secondary text-monospace font-italic font-weight-bolder\"\n                    data-dismiss=\"modal\" id=\"modalClose\">Close\n            </button>\n\n            <!-- update/create review submit button -->\n            <button appAddClass id=\"reviewSubmit\" type=\"submit\"\n                    class=\"btn btn-primary text-monospace font-italic font-weight-bolder\"\n                    [disabled]=\"reviewForm.form.invalid\">submit\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<!-- delete review modal -->\n<div class=\"modal fade\" id=\"deleteModel\" tabindex=\"-1\" role=\"dialog\"\n     aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n\n      <!-- delete review modal header -->\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title text-monospace font-italic font-weight-bolder\" id=\"exampleModalLongTitle\">Confirm Delete</h5>\n\n        <!-- delete review close modal button -->\n        <button (click)=\"closeAlert()\" type=\"button\" class=\"close\"\n                data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <!-- delete review modal body -->\n      <div class=\"modal-body\">\n        <h5 class=\"modal-title text-monospace font-italic\" style=\"text-align: center\">\n          <strong>Are you sure?</strong></h5>\n        <br>\n        <p class=\"text-monospace font-italic\">You are about to delete this comment, this process is <strong>irreversible\n        </strong></p>\n        <p class=\"text-monospace font-italic\">Do you want to proceed ?</p>\n      </div>\n\n      <!-- delete review modal footer -->\n      <div class=\"modal-footer\">\n\n        <!-- delete review success submit message -->\n        <span *ngIf=\"alertMessage.length > 1 && !(alertMessage.includes('wrong'))\"\n              class=\"text-monospace font-italic\"\n              style=\"color: green; margin-right: 70px\" id=\"reviewdeleteAlert\"> {{alertMessage}}\n            </span>\n\n        <!-- delete review failed submit message -->\n        <span *ngIf=\"alertMessage.includes('wrong')\"\n              class=\"text-monospace font-italic\"\n              style=\"color: red; margin-right: 90px\"> {{alertMessage}}\n            </span>\n\n        <!-- delete review close button -->\n        <button (click)=\"closeAlert()\" type=\"button\" id=\"deleteClose\"\n                class=\"btn btn-secondary text-monospace font-italic font-weight-bolder\"\n                data-dismiss=\"modal\">Close\n        </button>\n\n        <!-- delete review submit button -->\n        <button appAddClass (click)=\"onDeleteReview()\" type=\"button\" id=\"deleteSubmit\"\n                class=\"btn btn-danger text-monospace font-italic font-weight-bolder\">Delete\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!reviews.rev\">\n  <div class=\"sk-fading-circle\">\n    <div class=\"sk-circle1 sk-circle\"></div>\n    <div class=\"sk-circle2 sk-circle\"></div>\n    <div class=\"sk-circle3 sk-circle\"></div>\n    <div class=\"sk-circle4 sk-circle\"></div>\n    <div class=\"sk-circle5 sk-circle\"></div>\n    <div class=\"sk-circle6 sk-circle\"></div>\n    <div class=\"sk-circle7 sk-circle\"></div>\n    <div class=\"sk-circle8 sk-circle\"></div>\n    <div class=\"sk-circle9 sk-circle\"></div>\n    <div class=\"sk-circle10 sk-circle\"></div>\n    <div class=\"sk-circle11 sk-circle\"></div>\n    <div class=\"sk-circle12 sk-circle\"></div>\n  </div>\n</div>\n","<p-toast></p-toast>\n<br>\n<div class=\"container register-form col-lg-7 col-md-8 col-sm-8 rounded\">\n\n  <div class=\"form rounded col-12\">\n\n    <div class=\"note bg-dark\">\n      <h3 id=\"formTitle\" class=\"font-weight-bolder mb-3\">{{ 'REGISTER.TITLE' | translate }}</h3>\n      <p class=\"font-weight-bold\">{{ 'REGISTER.TITLE' | translate }}</p>\n    </div>\n\n    <form #signUpForm=\"ngForm\"\n          class=\"form-content text-center col-md-12 rounded my-form\" (submit)=\"onRegisterSubmit()\">\n\n      <!-- Username -->\n      <div class=\"row justify-content-center col-12\">\n        <label for=\"username\">\n        </label>\n        <input #usernameInput=\"ngModel\"\n               [class.is-invalid]=\"usernameInput.invalid && usernameInput.touched\"\n               [class.is-valid]=\"!(usernameInput.invalid && usernameInput.untouched)\"\n               class=\"form-control\" type=\"text\" id=\"username\"\n               [(ngModel)]=\"username\" name=\"username\" minlength=\"4\" maxlength=\"9\"\n               placeholder=\"username\" required>\n        <div *ngIf=\"usernameInput.errors && (usernameInput.invalid ||\n                        usernameInput.touched)\">\n          <small id=\"usernameError1\" class=\"text-danger\" *ngIf=\"usernameInput.errors.minlength\">\n            {{usernameInput.value}} username minimum length is 4\n          </small>\n          <small id=\"usernameError2\" class=\"text-danger\"\n                 *ngIf=\"usernameInput.errors.required\n                      && usernameInput.touched\">A username is required</small>\n        </div>\n      </div>\n      <br>\n\n      <!-- email -->\n      <div class=\"row justify-content-center col-12\">\n        <label for=\"inputEmail\">\n        </label>\n        <input #emailInput=\"ngModel\"\n               pattern=\"^[aA-zZ0-9._%+-]+@[a-z0-9.-]+\\.[aA-zZ]{2,4}$\"\n               [class.is-invalid]=\"emailInput.invalid && emailInput.touched\"\n               [class.is-valid]=\"!(emailInput.invalid && emailInput.untouched)\"\n               class=\"form-control\" type=\"email\" id=\"inputEmail\"\n               [(ngModel)]=\"email\" name=\"email\"\n               placeholder=\"Email address\" required>\n        <div *ngIf=\"emailInput.errors && (emailInput.invalid ||\n                        emailInput.touched)\">\n          <small id=\"emailInvalid\" class=\"text-danger\" *ngIf=\"emailInput.errors.pattern\">\n            {{emailInput.value}} is not a valid email\n          </small>\n          <small id=\"emailRequired\" class=\"text-danger\" *ngIf=\"emailInput.errors.required\n                      && emailInput.touched\">An Email is required</small>\n        </div>\n      </div>\n      <br>\n\n      <!-- password -->\n      <div class=\"row justify-content-center col-12\">\n        <label for=\"inputPassword\"></label>\n        <input #passwordInput=\"ngModel\"\n               [class.is-invalid]=\"passwordInput.invalid && passwordInput.touched\"\n               [class.is-valid]=\"!(passwordInput.invalid && passwordInput.untouched)\"\n               class=\"form-control\" type=\"password\" id=\"inputPassword\"\n               [(ngModel)]=\"password\" name=\"password\"\n               placeholder=\"Password\" required>\n        <small id=\"passwordRequired\" class=\"text-danger\" [class.d-none]=\"passwordInput.valid ||\n          passwordInput.untouched\">A password is required</small>\n      </div>\n      <br>\n\n      <!-- confirm password -->\n      <div class=\"row justify-content-center col-12\">\n        <label for=\"PasswordConfirm\" class=\"col-form-label\"></label>\n        <input #inputConfirmPassword=\"ngModel\" pattern=\"{{passwordInput.value}}\"\n               [class.is-invalid]=\"inputConfirmPassword.invalid &&\n                   inputConfirmPassword.touched\"\n               [class.is-valid]=\"!(inputConfirmPassword.invalid &&\n                   inputConfirmPassword.untouched)\"\n               class=\"form-control\" type=\"password\" id=\"PasswordConfirm\"\n               [(ngModel)]=\"confirmPassword\" name=\"confirmPassword\"\n               placeholder=\"Confirm password\" required>\n\n        <div *ngIf=\"inputConfirmPassword.errors && (inputConfirmPassword.invalid ||\n                        inputConfirmPassword.touched)\">\n          <small id=\"passwordMatchError\" class=\"text-danger\"\n                 *ngIf=\"inputConfirmPassword.errors.pattern\">Passwords do not match</small>\n          <small id=\"confirmPasswordError\" class=\"text-danger\" *ngIf=\"inputConfirmPassword.errors.required\n                      && inputConfirmPassword.touched\">Please confirm your password</small>\n        </div>\n      </div>\n      <small class=\"font-italic\">\n        <i class=\"fa fa-info-circle\" aria-hidden=\"true\" style=\"color: green\"></i>\n        {{ 'REGISTER.WARN' | translate }}\n      </small>\n\n      <!-- sign up buttton -->\n      <div class=\"d-flex\">\n        <div>\n          <button [disabled]=\"signUpForm.form.invalid\"\n                  class=\"btn btn-secondary btn-rounded\n                  text-monospace font-italic font-weight-bolder\" id=\"submitBtn\"\n                  type=\"submit\">{{ 'REGISTER.SIGNUP_BTN' | translate }}\n          </button>\n        </div>\n        <div class=\"ml-auto\">\n          <small class=\"\">\n            <a class=\"nav-link font-italic\"\n               style=\"text-decoration: underline; color: #343A40\"\n               [routerLink]=\"['/login']\">{{ 'REGISTER.LOGIN_URL' | translate }}</a>\n          </small>\n        </div>\n      </div>\n    </form>\n\n  </div>\n</div>\n\n\n<!-- Confirm Password\n\n\n<div class=\"row justify-content-center w-100 col-12 \">\n\n</div>\n\n-->\n","import {Component, OnInit} from '@angular/core';\nimport {ValidateService} from \"@app/core/services/validate.service\";\nimport {AuthService} from \"@app/core/services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {EToastSeverities, ToastService} from \"@app/core/services/toast.service\";\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  email: string;\n  password: string;\n  username: string;\n  confirmPassword : string;\n  emailPattern : string = \"/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/\";\n\n  constructor(private validateService: ValidateService,\n              public toastService: ToastService,\n              private authService: AuthService,\n              private router: Router) {\n  }\n\n  ngOnInit() {\n  }\n\n  onRegisterSubmit() {\n    const user = {\n      username: this.username,\n      email: this.email,\n      password: this.password\n    };\n\n    if (!this.validateService.validateRegister(user)) {\n      this.toastService.show(EToastSeverities.INFO, 'Please fill in all fields');\n      setTimeout(async () => await this.router.navigate(['/dashboard']), 1000);\n      return false;\n    }\n\n    // register\n    this.authService.registerUser(JSON.stringify(user))\n      .subscribe(\n        async (data: any) => {\n          this.toastService.show(EToastSeverities.INFO, `A verification email has been sent to ${data.user.userEmail}`);\n          setTimeout(async () => await this.router.navigate(['/login']), 1000);\n        },\n        err => {\n          console.error(err.error);\n          this.toastService.show(EToastSeverities.ERROR, 'Something went wrong');\n        });\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport {ConfirmationDialogComponent} from \"@app/shared/components/confirmation-dialog/confirmation-dialog.component\";\nimport {DialogService} from \"primeng/dynamicdialog\";\nimport {EToastSeverities, ToastService} from \"@app/core/services/toast.service\";\nimport {BookingService} from \"@app/core/services/booking.service\";\nimport {Router} from \"@angular/router\";\nimport {filter, switchMap, tap} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-appointment',\n  templateUrl: './appointment.component.html',\n  styleUrls: ['./appointment.component.css']\n})\nexport class AppointmentComponent implements OnInit {\n\n  events: any[] = [];\n\n  options: any;\n\n  constructor(private readonly dialogService: DialogService,\n              private router: Router,\n              public toastService: ToastService,\n              private bookingService: BookingService) {\n  }\n\n  ngOnInit(): void {\n\n    if (!Object.keys(localStorage).includes('id_token')) {\n      this.toastService.show(EToastSeverities.INFO, 'Redirected to login page !');\n      this.router.navigate(['/login'])\n    }\n\n    this.options = {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      defaultDate: new Date().toISOString(),\n      header: {\n        left: 'prev,next',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      }\n    };\n\n    this.getBookings();\n  }\n\n  getClikedDate(fc: any): void {\n    let clickedTeacherBooking = '';\n    if ((fc as HTMLElement).tagName === 'SPAN') {\n      const target = fc as HTMLElement;\n      clickedTeacherBooking = target?.innerHTML.split('to')[1]?.split('(')[1]?.charAt(0);\n    } else if ((fc as HTMLElement).tagName === 'DIV') {\n      const target = fc as HTMLElement;\n      const target1 = target.innerHTML as unknown as HTMLElement;\n      clickedTeacherBooking = JSON.stringify(target1)?.split('to')[1]?.split('(')[1]?.charAt(0);\n    }\n\n    if (clickedTeacherBooking) {\n      this.openConfirmationDialog(clickedTeacherBooking);\n    }\n  }\n\n  getBookings() {\n    this.bookingService.getTeacherBookings()\n      .subscribe(\n        (data: any) => {\n          this.events = this.showEvents(data);\n        },\n        err => {\n          console.error(err.error);\n        });\n  }\n\n  openConfirmationDialog(bookingIndex): void {\n    const booking = this.events.find(u => u.id == bookingIndex);\n    const bookingTosave = {\n      start: booking.start,\n      end: booking.end,\n      bookingIndex: bookingIndex\n    };\n    console.log(bookingTosave)\n    const ref = this.dialogService.open(ConfirmationDialogComponent, {\n      header: 'Confirmation',\n      data: {\n        message: `book the teacher from ${booking.start.split('T')[1].substring(0, 5)} to  ${booking.end.split('T')[1].substring(0, 5)}`\n      }\n    });\n\n    ref.onClose\n      .pipe(\n        filter((confirm: boolean) => confirm),\n        switchMap(() => this.bookingService.addUserBooking(bookingTosave)),\n        switchMap(() => this.bookingService.getTeacherBookings()))\n      .subscribe(\n        (data: any) => {\n          this.events = this.showEvents(data);\n          this.toastService.show(EToastSeverities.SUCCESS, 'Successfully booked !');\n        },\n        error => {\n          if (error.error.message) {\n            this.toastService.show(EToastSeverities.INFO, `${error.error.message}`);\n          } else {\n            this.toastService.show(EToastSeverities.ERROR, 'Something went wrong !');\n          }\n        })\n\n  }\n\n  showEvents(data: any) {\n    const bookings = [];\n    data\n      .forEach((u, i) => {\n        const title = (u.state === 'FINISHED') ?\n          `to ${u.end.split('T')[1].substring(0, 5)}`\n          : `to ${u.end.split('T')[1].substring(0, 5)} (${i})`;\n        const color = (u.state === 'CANCELLED') ? '#6A5720' : (u.state === 'FINISHED') ? '#F02B1D' : ''\n        bookings.push({\n          id: i,\n          title: title,\n          start: u.start,\n          end: u.end,\n          color: color\n        });\n      });\n    return bookings;\n  }\n}\n\n/*\n    ref.onClose.subscribe((confirm: boolean) => {\n      if (confirm) {\n        this.events = this.events.filter(u => u.id != bookingIndex);\n        this.toastService.show(EToastSeverities.SUCCESS, 'successfully booked !');\n      }\n    });\n\n */\n","<p-toast></p-toast>\n\n<br>\n<div class=\"d-flex justify-content-center align-items-center\">\n  <h3 class=\"mb-4 font-weight-bold ml-5\">\n    Take an Appointment\n  </h3>\n</div>\n<div class=\"d-flex justify-content-center align-items-center\">\n  <div class=\"container m-5 p-5 border border-bottom\">\n\n    <p-fullCalendar (click)=\"getClikedDate($event.target)\" [events]=\"events\" [options]=\"options\"></p-fullCalendar>\n  </div>\n</div>\n\n","import {Component, OnInit} from '@angular/core';\nimport {Router, ActivatedRoute, Params} from '@angular/router';\nimport {AuthService} from \"@app/core/services/auth.service\";\nimport {catchError} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-verify-email',\n  templateUrl: './verify-email.component.html',\n  styleUrls: ['./verify-email.component.css']\n})\nexport class VerifyEmailComponent implements OnInit {\n\n  key: string = \"\";\n  message: string = \"\";\n  resendmessage: string = \"\";\n  resendEmail: string = \"\";\n  isVerified: boolean;\n\n  constructor(private route: ActivatedRoute,\n              private authService: AuthService) {\n  }\n\n  ngOnInit() {\n    this.key = this.route.snapshot.paramMap.get('key');\n  }\n\n  verifyEmail() {\n    this.authService.confirmEmail(this.key)\n      .toPromise()\n      .then((data: any) => {\n        this.isVerified = data.success;\n        this.message = data.message;\n      })\n      .catch(err => {\n        this.isVerified = err.error.success;\n        this.message = err.error.message;\n        console.log(err)\n      });\n  }\n\n  resend(){\n\n    this.authService.resendEmail(this.resendEmail)\n      .toPromise()\n      .then((data: any) => {\n        console.log(data);\n        this.resendmessage = data.message;\n      })\n      .catch(err => {\n        this.resendmessage = err.error.message;\n        console.log(err)\n      });\n\n  }\n\n}\n","<!-- Valid key alert -->\n\n<div *ngIf=\"isVerified\">\n  <div class=\"row justify-content-center\">\n    <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n      <strong>Success!</strong> {{message}}\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<!-- resend key alert -->\n<div *ngIf=\"resendmessage.length !== 0 && resendmessage.includes('resent')\">\n  <div class=\"row justify-content-center\">\n    <div class=\"alert alert-dismissible alert-primary\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n      <strong>Sent!</strong> {{resendmessage}}\n    </div>\n  </div>\n</div>\n\n\n<!-- Account already verified alert -->\n<div *ngIf=\"resendmessage.length !== 0 && resendmessage.includes('log')\">\n  <div class=\"row justify-content-center\">\n    <div class=\"alert alert-dismissible alert-secondary\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n      <strong>Oh snap!</strong> This account has already been verified.\n    </div>\n  </div>\n</div>\n\n<!-- resend key failed alert -->\n<div *ngIf=\"resendmessage.length !== 0 && resendmessage.includes('No')\">\n  <div class=\"row justify-content-center\">\n    <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n      <strong>Oh snap!</strong> {{resendmessage}}\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  </div>\n</div>\n\n\n<!-- expired key alert -->\n\n<div *ngIf=\"isVerified === false && resendmessage.length === 0\" class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n      <strong>Oh snap!</strong> {{message}}\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<!-- Card header -->\n\n<div *ngIf=\"key.length === 64\" class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <div class=\"avatar mx-auto white row justify-content-center\">\n          <img *ngIf=\"message.length === 0\"\n               src=\"../../../../../assets/img/email1.png\"\n               class=\"img-fluid h-25\" alt=\"\">\n\n          <img *ngIf=\"isVerified === false && resendmessage.length === 0\"\n               src=\"../../../../../assets/img/exipired.png\"\n               class=\"img-fluid h-25\" alt=\"\">\n\n          <img *ngIf=\"resendmessage.length !== 0\"\n               src=\"../../../../../assets/img/resend-email.png\"\n               class=\"img-fluid h-25\" alt=\"\">\n\n          <img *ngIf=\"isVerified\"\n               src=\"../../../../../assets/img/verified.png\"\n               class=\"img-fluid h-25\" alt=\"\">\n        </div>\n        <h4 *ngIf=\"message.length === 0\"\n            class=\"text-monospace font-italic font-weight-bolder row justify-content-center\">\n          Please confirm your email address\n        </h4>\n      </div>\n\n      <!-- normal card body  -->\n      <div *ngIf=\"message.length === 0\" class=\"card-body\">\n        <p class=\"card-text text-monospace font-italic font-weight-bold\">\n          Thanks for signing up to TeacherApp, We’re happy to have you.\n        </p>\n        <p class=\" text-monospace font-italic\">\n          Please take a second to make sure we have your correct email address.</p>\n\n        <div class=\"row justify-content-center\">\n          <button [disabled]=\"message.length !== 0\" (click)=\"verifyEmail()\"\n                  type=\"button\" class=\"btn btn-md btn-success\n                  text-monospace font-italic font-weight-bolder text-center\">\n            Confirm your email address\n          </button>\n        </div>\n      </div>\n\n      <!-- resend email card body -->\n      <div *ngIf=\"(isVerified === false || resendmessage.length !== 0)\n            && !resendmessage.includes('log')\"\n           class=\"card-body\">\n        <p class=\"card-text text-monospace font-italic font-weight-bold\">\n          To resend the key, enter your email address below.\n        </p>\n\n        <!-- resend email input -->\n        <label for=\"inputEmail\">\n        </label>\n        <input #emailInput=\"ngModel\"\n               pattern=\"^[aA-zZ0-9._%+-]+@[a-z0-9.-]+\\.[aA-zZ]{2,4}$\"\n               [class.is-invalid]=\"emailInput.invalid && emailInput.touched\"\n               [class.is-valid]=\"!(emailInput.invalid && emailInput.untouched)\"\n               class=\"form-control\"\n               type=\"email\" id=\"inputEmail\"\n               [(ngModel)]=\"resendEmail\" name=\"email\"\n               placeholder=\"Email address\" required>\n        <div *ngIf=\"emailInput.errors && (emailInput.invalid ||\n                        emailInput.touched)\">\n          <small id=\"emailInvalid\" class=\"text-danger\"\n                 *ngIf=\"emailInput.errors.pattern\">\n            {{emailInput.value}} is not a valid email\n          </small>\n          <small id=\"emailRequired\" class=\"text-danger\"\n                 *ngIf=\"emailInput.errors.required\n                      && emailInput.touched\">An Email is required</small>\n        </div>\n\n        <!-- end resend email input -->\n\n        <br>\n\n        <div class=\"row justify-content-center\">\n          <button [disabled]=\"emailInput.invalid || resendmessage.length !== 0\"\n                  (click)=\"resend()\" type=\"button\" class=\"btn btn-md btn-success\n                  text-monospace font-italic font-weight-bolder text-center\">\n            Resend the key\n          </button>\n        </div>\n      </div>\n\n      <!-- valid key card body -->\n      <div *ngIf=\"isVerified || resendmessage.includes('log')\" class=\"card-body\">\n        <p *ngIf=\"!resendmessage.includes('log')\"\n          class=\"card-text text-monospace font-italic font-weight-bold\">\n          Your email has been verified, you may now login...\n        </p>\n\n        <p class=\"card-text text-monospace font-italic font-weight-bold\">\n         {{resendmessage}}\n        </p>\n\n        <div class=\"row justify-content-center\">\n          <button [routerLink]=\"['/login']\"\n                  type=\"button\" class=\"btn btn-md btn-success\n                  text-monospace font-italic font-weight-bolder text-center\">\n            Login\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<!-- Invalid key -->\n\n<div *ngIf=\"key.length !== 64\" class=\"container\">\n  <div class=\"row justify-content-center\">\n    <img src=\"../../../../../assets/img/invalid-key.jpg\"\n         class=\"img-fluid\" alt=\"\">\n    <h5 class=\"text-monospace font-italic\">\n      <ngb-alert [type]=\"'danger'\" [dismissible]=\"false\">\n        <strong>Invalid key!</strong> Better check yourself, you're not looking too good.\n      </ngb-alert>\n    </h5>\n  </div>\n</div>\n\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"@app/core/services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {EToastSeverities, ToastService} from \"@app/core/services/toast.service\";\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: Object;\n  token: any;\n  userId: any;\n  email: string;\n  username: string;\n  password: string;\n  confirmPassword: string;\n\n  alertMessage : string  = '';\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    public toastService: ToastService) {\n  }\n\n\n  ngOnInit() {\n    this.getUserProfile();\n  }\n\n  getUserProfile() {\n    if (this.authService.getAllProfiles() === undefined) {\n      this.authService.logout();\n      this.toastService.show(EToastSeverities.INFO, 'You need to log in !');\n      this.router.navigate(['/login']);\n    } else {\n      this.authService.getProfile().subscribe(\n        (profile: any) => {\n          this.user = profile.user;\n          this.email = profile.user.email;\n          this.username = profile.user.username;\n          this.username = profile.user.username;\n          this.authService.username =\n            JSON.parse(localStorage.getItem('user')).username;\n        },\n        err => {\n          console.log(err);\n          return false;\n        }\n      );\n    }\n  }\n\n  onUpdateUser() {\n    const user = {\n      \"username\": this.username,\n      \"email\": this.email,\n      \"password\": this.password\n    };\n\n    this.authService.updateUser(this.authService.userId, user)\n      .toPromise()\n      .then((data: any) => {\n        this.getUserProfile();\n        this.alertMessage = `${data[\"message\"]} !`;\n      })\n      .catch(err => {\n        this.alertMessage = \"Something went wrong !\";\n        console.log(err);\n      });\n\n  }\n\n  closeAlert() {\n    this.alertMessage = \"\";\n  }\n}\n\n","<div *ngIf=\"user\" style=\"width:200px; margin:0 auto;\">\n  <!--Grid column-->\n  <div class=\"col-lg-4 col-md-6 mb-md-0 mb-4\">\n    <!--Card-->\n    <div class=\"card testimonial-card\"\n         style=\"width:400px; margin-left:-110px; margin-top: 18px\">\n      <!--Background color-->\n      <div class=\"card-up blue-gradient\">\n      </div>\n      <!--Avatar-->\n      <div class=\"avatar mx-auto white\" style=\"margin-top: 8px\">\n        <img src=\"../../../../assets/img/{{user['username']}}.jpg\" class=\"rounded-circle img-fluid\" alt=\"\"\n        style=\"height: 150px\" onerror='this.src = \"../../../../assets/img/no-profile.png\"'>\n\n      </div>\n      <div class=\"card-body\">\n        <!--Name-->\n        <h4 class=\"font-weight-bold mb-4\">{{user[\"username\"]}}\n          <i *ngIf=\"user['isVerified']\" class=\"fa fa-check-circle\"\n             style=\"color: dodgerblue\" title=\"Verified Account\"></i>\n          <i *ngIf=\"!user['isVerified']\" class=\"fa fa-times-circle\"\n             style=\"color: indianred\" title=\"Unverified Account\"></i>\n        </h4>\n        <hr>\n        <!--Quotation-->\n        <p class=\"dark-grey-text mt-4\"><i class=\"fa fa-quote-left pr-2\"></i>\n\n          <strong style=\"margin-right: 36px\">Id : </strong> {{user[\"userId\"]}}\n          <br>\n          <strong style=\"margin-right: 34px\"> Email : </strong> {{user[\"email\"]}}\n          <br>\n          <strong> Username : </strong> {{user[\"username\"]}}\n          <br>\n          <strong style=\"margin-right: 37px\"> Level : </strong> {{user[\"level\"]}}\n          <br>\n          <strong style=\"margin-right: 44px\"> Role : </strong> {{user[\"role\"]}}\n          <i style=\"margin-left: 140px\" class=\"fa fa-quote-right pr-2\"></i>\n        </p>\n      </div>\n    </div>\n    <!--Card-->\n    <br>\n  </div>\n  <button type=\"button\" class=\"btn btn-info text-monospace font-italic font-weight-bolder\"\n          data-toggle=\"modal\" data-target=\"#exampleModal\" id=\"updateUser\"\n          style=\"width:130px; margin-left:40px;\">Update\n  </button>\n  <br>\n  <br>\n</div>\n\n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"\n     aria-hidden=\"true\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title font-weight-bold text-monospace font-italic\"\n            id=\"exampleModalLabel\">Update your profile</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <form #profileForm=\"ngForm\" (submit)=\"onUpdateUser()\">\n\n          <!-- Username -->\n          <div class=\"form-group\">\n            <label for=\"username\" class=\"col-form-label\"></label>\n            <input #usernameInput=\"ngModel\"\n                   [class.is-invalid]=\"usernameInput.invalid && usernameInput.touched\"\n                   [class.is-valid]=\"!(usernameInput.invalid && usernameInput.untouched)\"\n                   class=\"form-control\" type=\"text\" id=\"username\" minlength=\"4\" maxlength=\"9\"\n                   [(ngModel)]=\"username\" name=\"username\" value=\"{{username}}\"\n                   placeholder=\"Username\" required>\n\n            <div *ngIf=\"usernameInput.errors && (usernameInput.invalid ||\n                        usernameInput.touched)\">\n              <small id=\"usernameError1\" class=\"text-danger\"\n                     *ngIf=\"usernameInput.errors.minlength\">\n                {{usernameInput.value}} username minimum length is 4\n              </small>\n              <small id=\"usernameError2\" class=\"text-danger\"\n                     *ngIf=\"usernameInput.errors.required\n                      && usernameInput.touched\">A username is required\n              </small>\n            </div>\n          </div>\n\n          <!-- Email address -->\n          <div class=\"form-group\">\n            <label for=\"inputEmail\">\n            </label>\n            <input #emailInput=\"ngModel\"\n                   pattern=\"^[aA-zZ0-9._%+-]+@[a-z0-9.-]+\\.[aA-zZ]{2,4}$\"\n                   [class.is-invalid]=\"emailInput.invalid && emailInput.touched\"\n                   [class.is-valid]=\"!(emailInput.invalid && emailInput.untouched)\"\n                   class=\"form-control\" type=\"email\" id=\"inputEmail\"\n                   [(ngModel)]=\"email\" name=\"email\"\n                   placeholder=\"Email address\" required>\n          </div>\n          <div *ngIf=\"emailInput.errors && (emailInput.invalid ||\n                        emailInput.touched)\">\n            <small class=\"text-danger\" *ngIf=\"emailInput.errors.pattern\">\n              {{emailInput.value}} is not a valid email</small>\n            <small id=\"emailRequired\" class=\"text-danger\" *ngIf=\"emailInput.errors.required\n                      && emailInput.touched\">An Email is required</small>\n          </div>\n\n          <!-- Password -->\n          <div class=\"form-group\">\n            <label for=\"inputPassword\" class=\"col-form-label\"></label>\n            <input #passwordInput=\"ngModel\"\n                   [class.is-invalid]=\"passwordInput.invalid && passwordInput.touched\"\n                   [class.is-valid]=\"!(passwordInput.invalid && passwordInput.untouched)\"\n                   class=\"form-control\" type=\"password\" id=\"inputPassword\"\n                   [(ngModel)]=\"password\" name=\"password\"\n                   placeholder=\"Password\" required>\n            <small id=\"passwordRequired\" class=\"text-danger\" [class.d-none]=\"passwordInput.valid ||\n            passwordInput.untouched\">A password is required</small>\n          </div>\n\n          <!-- Confirm Password  -->\n          <div class=\"form-group\">\n            <label for=\"passwordConfirm\" class=\"col-form-label\"></label>\n            <input #inputConfirmPassword=\"ngModel\" pattern=\"{{passwordInput.value}}\"\n                   [class.is-invalid]=\"inputConfirmPassword.invalid &&\n                   inputConfirmPassword.touched\"\n                   [class.is-valid]=\"!(inputConfirmPassword.invalid &&\n                   inputConfirmPassword.untouched)\"\n                   class=\"form-control\" type=\"password\" id=\"passwordConfirm\"\n                   [(ngModel)]=\"confirmPassword\" name=\"confirmPassword\"\n                   placeholder=\"Confirm password\" required>\n\n            <div *ngIf=\"inputConfirmPassword.errors && (inputConfirmPassword.invalid ||\n                        inputConfirmPassword.touched)\">\n              <small id=\"passwordMatchError\" class=\"text-danger\"\n                     *ngIf=\"inputConfirmPassword.errors.pattern\">Passwords do not match</small>\n              <small id=\"confirmPasswordError\" class=\"text-danger\" *ngIf=\"inputConfirmPassword.errors.required\n                      && inputConfirmPassword.touched\">Please confirm your password</small>\n            </div>\n          </div>\n\n          <!-- Modal footer -->\n          <div class=\"modal-footer\">\n             <span *ngIf=\"alertMessage.length > 1 && !(alertMessage.includes('wrong'))\"\n                   style=\"color: green; margin-right: 30px\" id=\"updateSuccess\">\n            {{alertMessage}}\n          </span>\n            <span *ngIf=\"alertMessage.includes('wrong')\"\n                  style=\"color: red; margin-right: 30px\" id=\"updateFail\">{{alertMessage}}\n          </span>\n            <button (click)=\"closeAlert()\" type=\"button\"\n                    class=\"btn btn-secondary text-monospace font-italic font-weight-bolder\"\n                    data-dismiss=\"modal\" id=\"modalClose\">Close\n            </button>\n\n            <button appAddClass type=\"submit\" id=\"submitUpdate\"\n                    class=\"btn btn-primary text-monospace font-italic font-weight-bolder\"\n                    [disabled]=\"profileForm.form.invalid\">Submit</button>\n\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!user\">\n  <div class=\"sk-fading-circle\">\n    <div class=\"sk-circle1 sk-circle\"></div>\n    <div class=\"sk-circle2 sk-circle\"></div>\n    <div class=\"sk-circle3 sk-circle\"></div>\n    <div class=\"sk-circle4 sk-circle\"></div>\n    <div class=\"sk-circle5 sk-circle\"></div>\n    <div class=\"sk-circle6 sk-circle\"></div>\n    <div class=\"sk-circle7 sk-circle\"></div>\n    <div class=\"sk-circle8 sk-circle\"></div>\n    <div class=\"sk-circle9 sk-circle\"></div>\n    <div class=\"sk-circle10 sk-circle\"></div>\n    <div class=\"sk-circle11 sk-circle\"></div>\n    <div class=\"sk-circle12 sk-circle\"></div>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"@app/core/services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {ValidateService} from \"@app/core/services/validate.service\";\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\nimport {EToastSeverities, ToastService} from \"@app/core/services/toast.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n\n  pseudo: String;\n  password: String;\n  timeLoggedIn: number;\n  isVerified: boolean;\n\n  constructor(private validateService: ValidateService,\n              public toastService: ToastService,\n              private authService: AuthService,\n              private router: Router) {\n  }\n\n  ngOnInit() {\n  }\n\n  onLoginSubmit() {\n    const user = {\n      pseudo: this.pseudo,\n      password: this.password\n    };\n\n    if (!this.validateService.validateLogin(user)) {\n\n      this.toastService.show(EToastSeverities.WARN, 'Please fill in all fields !');\n\n      return false;\n    }\n\n    this.authService.loginUser(JSON.stringify(user))\n      .subscribe(\n        async (data: any) => {\n          this.timeLoggedIn = new Date().getTime();\n          this.sessionExpired(data.token);\n          this.authService.storeUserData(data);\n          this.authService.role = data.user.role;\n          this.authService.username = data.user.username;\n          this.authService.userId = data.user.userId;\n          this.authService.userEmail = data.user.userEmail;\n          this.toastService.show(EToastSeverities.INFO, 'Welcome back !');\n          setTimeout(async () => await this.router.navigate(['/questions']), 1000);\n        },\n        err => {\n          console.log(err)\n          this.isVerified = err.error?.isVerified;\n          if (Object.keys(err?.error).includes(\"isVerified\")) {\n            this.toastService.show(EToastSeverities.ERROR, `${err.error.message}`);\n          } else {\n            this.toastService.show(EToastSeverities.ERROR, 'Incorrect credentials !');\n          }\n        });\n\n\n  }\n\n  sessionExpired(token: string) {\n    const expirationDate = new JwtHelperService()\n      .getTokenExpirationDate(token).getTime();\n    const sessionExpired = expirationDate - this.timeLoggedIn;\n    setTimeout(() => {\n      this.authService.logout();\n      this.toastService.show(EToastSeverities.WARN, 'Your session is over, you can log in back in to start a new session.');\n    }, sessionExpired);\n  }\n\n\n  isAdmins() {\n    return this.authService.role === 'admin';\n  }\n\n}\n","<p-toast></p-toast>\n\n<br>\n<div class=\"container register-form col-lg-7 col-md-8 col-sm-8 rounded\">\n\n  <div class=\"form rounded col-12\">\n\n    <div class=\"note bg-dark\">\n      <h3 id=\"formTitle\"\n          class=\"font-weight-bolder mb-3\">\n        {{ 'LOGIN.TITLE' | translate }}</h3>\n      <p class=\"font-weight-bold\">\n        {{ 'LOGIN.SUBTITLE' | translate }}\n      </p>\n    </div>\n\n    <form #signUpForm=\"ngForm\"\n          class=\"form-content text-center col-md-12 rounded my-form\"\n          (submit)=\"onLoginSubmit()\">\n\n      <!-- Username -->\n      <div class=\"row justify-content-center col-12\">\n        <label for=\"pseudo\">\n        </label>\n        <input #pseudoInput=\"ngModel\"\n               [class.is-invalid]=\"pseudoInput.invalid && pseudoInput.touched\"\n               [class.is-valid]=\"!(pseudoInput.invalid && pseudoInput.untouched)\"\n               class=\"form-control \" type=\"text\" id=\"pseudo\"\n               [(ngModel)]=\"pseudo\" name=\"pseudo\"\n               placeholder=\"Email address or Username\" required>\n        <small id=\"emailError\" class=\"text-danger\" [class.d-none]=\"pseudoInput.valid ||\n          pseudoInput.untouched\">An Email or a username is required</small>\n      </div>\n      <br>\n\n      <!-- password -->\n      <div class=\"row justify-content-center col-12\">\n        <label for=\"password\"></label>\n        <label for=\"password\"></label>\n        <input #passwordInput=\"ngModel\"\n               [class.is-invalid]=\"passwordInput.invalid && passwordInput.touched\"\n               [class.is-valid]=\"!(passwordInput.invalid && passwordInput.untouched)\"\n               class=\"form-control\" type=\"password\" id=\"password\"\n               [(ngModel)]=\"password\" name=\"password\"\n               placeholder=\"Password\" required>\n        <small id=\"passwordError\" class=\"text-danger\" [class.d-none]=\"passwordInput.valid ||\n          passwordInput.untouched\">A password is required</small>\n      </div>\n      <br>\n\n      <div class=\"d-flex\">\n        <div>\n          <button [disabled]=\"signUpForm.form.invalid\"\n                  class=\"btn btn-secondary btn-rounded\n                  text-monospace font-italic font-weight-bolder\"\n                  id=\"submitBtn\" type=\"submit\">{{ 'LOGIN.SIGNIN_BTN' | translate }}\n          </button>\n        </div>\n        <div class=\"ml-auto\">\n          <small class=\"\">\n            <a class=\"nav-link font-italic\" id=\"signUpLink\"\n               style=\"text-decoration: underline; color: #343A40\"\n               [routerLink]=\"['/register']\">{{ 'LOGIN.SIGNUP_URL' | translate }}</a>\n          </small>\n        </div>\n      </div>\n    </form>\n\n  </div>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {SharedModule} from \"../shared/shared.module\";\nimport {ReviewsComponent} from \"./components/reviews/reviews.component\";\nimport {LoginComponent} from './components/login/login.component';\nimport {RegisterComponent} from './components/register/register.component';\nimport {ProfileComponent} from './components/profile/profile.component';\nimport {QuestionsComponent} from './components/questions/questions.component';\nimport {ResultsComponent} from './components/questions/results/results.component';\nimport { VerifyEmailComponent } from './components/register/verify-email/verify-email.component';\nimport {ReplacePipe} from \"@app/shared/pipes/replace.pipe\";\nimport { AppointmentComponent } from './components/appointment/appointment.component';\n\n\nconst appRoutes: Routes = [\n  {path: \"register\", pathMatch: 'full', component: RegisterComponent},\n  {path: \"verify-email/:key\", component: VerifyEmailComponent},\n  {path: \"login\", pathMatch: 'full', component: LoginComponent},\n  {path: \"booking\", component: AppointmentComponent},\n  {path: \"questions\", component: QuestionsComponent},\n  {path: \"results\", component: ResultsComponent},\n  {path: \"reviews\", component: ReviewsComponent},\n  {path: \"profile/:id\", component: ProfileComponent}\n];\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    ProfileComponent,\n    QuestionsComponent,\n    ResultsComponent,\n    ReviewsComponent,\n    VerifyEmailComponent,\n    AppointmentComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(appRoutes),\n  ],\n  exports: [RouterModule],\n  providers: [\n    ReplacePipe\n  ],\n})\nexport class FeaturesModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"@app/core/services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {QuestionsService} from \"@app/core/services/questions.service\";\n\n@Component({\n  selector: 'app-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.css']\n})\nexport class ResultsComponent implements OnInit {\n\n  description: any;\n\n  constructor(\n    public authService: AuthService,\n    private router: Router,\n    public questions: QuestionsService\n  ) {\n  }\n\n  ngOnInit() {\n\n\n    const userScore = {\n      \"score\": this.questions.correctAnswerCount\n    };\n    this.authService.updateScore(userScore)\n      .toPromise()\n      .then()\n      .catch(err => {\n        console.log(err);\n      });\n    this.getLevel();\n  }\n\n  getLevel() {\n    this.authService.getProfile()\n      .toPromise()\n      .then((data: any) => {\n        this.description = this.questions.getLevelDescription(data.user.level);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n}\n","<div *ngIf=\" questions.qns && description\">\n\n  <!-- completed text -->\n<h2 class=\"header mb-4 font-weight-bold\"\n    style=\"margin-left: 24px\">Completed!</h2>\n\n  <!-- user results and level description -->\n<div class=\"card container\" >\n  <div class=\"card-body\">\n    <div class=\"row\" style=\"margin : 10px\">\n      <div class=\"col-lg-3\" style=\"margin-right: 20px\">\n        <div class=\"\">\n          <img src=\"../../../../../assets/img/trophy.png\" style=\"width: 250px; height: 250px;\" alt=\"\">\n        </div>\n      </div>\n      <div class=\"col-lg-4\">\n        <div>\n          <br>\n\n          <!-- username -->\n          <h4 class=\"text-monospace font-italic font-weight-bolder\">{{authService.username}}</h4>\n\n          <!-- user score -->\n          <h4 class=\"text-monospace font-italic font-weight-bolder\">\n            Your score is : {{questions.correctAnswerCount}}/10\n          </h4>\n\n          <!-- user level -->\n          <h4 class=\"text-monospace font-italic font-weight-bolder\">\n            Your is level is : {{description[\"Level\"]}}\n          </h4>\n\n          <!-- user time taken -->\n          <span class=\"blockquote-footer text-monospace font-italic font-weight-bolder\"\n                style=\"font-size: medium\">\n            Time Elapsed : {{questions.timeTaken}}</span>\n        </div>\n\n        <!-- restart button card -->\n        <div class=\"card-action\">\n          <hr>\n          <button [routerLink]=\"['/booking']\"\n                  class=\"btn btn-outline-success my-2 my-sm-0\" type=\"button\"\n                  style=\"width:150px; margin-left:40px;\">\n            <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>\n            Take an appointment\n          </button>\n        </div>\n      </div>\n\n      <!-- user level description -->\n      <div class=\"col-lg-4\">\n        <div>\n          <br>\n          <h4>{{description[\"Title\"]}}</h4>\n          <p>\n            {{description[\"Subtitle\"]}}\n          </p>\n          <ol>\n            <li>\n              {{description[\"1\"]}}\n            </li>\n            <li>\n              {{description[\"2\"]}}\n            </li>\n            <li>\n              {{description[\"3\"]}}\n            </li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<br>\n\n  <!-- loop through all questions answers -->\n  <ng-container *ngFor=\"let qn of questions.qns;let i=index\">\n    <div class=\"card\" style=\"background-color: #31373e; margin-left: 120px; margin-right: 120px\">\n\n      <!-- question number and title -->\n      <div class=\"card-content\">\n        <p class=\"card-title text-monospace font-italic font-weight-bolder\"\n           style=\"color: white; margin: 20px\">Question {{(i + 1)}} :</p>\n        <h5>\n          <p style=\"color: white; margin: 20px\">\n            <strong>{{qn.question}}</strong>\n          </p>\n        </h5>\n      </div>\n\n      <!-- question answers card -->\n      <div class=\"card\" style=\"margin: 10px;\">\n        <p class=\"list-group list-group-flush\">\n\n          <!-- loop through all answers -->\n          <ng-container *ngFor=\"let option of qn['answers'];let j = index\">\n\n            <!-- a tag for non fill in question -->\n            <a *ngIf=\"qn.type !== 'fill in'\"\n              class=\"list-group-item list-group-item-action\">\n              {{option.option}}\n              <span *ngIf=\"(option['isCorrect']) === 'true'\">\n                 <i class=\"fa fa-check-circle right-align\"\n                    style=\"color: green; position: absolute; right: 150px\"> correct answer</i>\n              </span>\n              <span *ngIf=\"(qn['index']) === j && (option['isCorrect']) === 'false'\">\n                 <i class=\"fa fa-times-circle right-align\"\n                    style=\"color: red; position: absolute; right: 135px\"> incorrect answer</i>\n              </span>\n            </a>\n\n            <!-- a tag for fill in question -->\n            <a *ngIf=\"qn.type === 'fill in'\"\n                class=\"list-group-item list-group-item-action\">\n              ({{j+1}}) {{option.option}}\n              <span *ngIf=\"(option['isCorrect']) === 'true'\">\n                 <i class=\"fa fa-check-circle right-align\"\n                    style=\"color: green; position: absolute; right: 150px\"> correct answer</i>\n              </span>\n            </a>\n            <a *ngIf=\"qn.type === 'fill in' && option.option !== qn['fill'][j]\"\n               class=\"list-group-item list-group-item-action\"\n            style=\"color: red\">\n              ({{j+1}}) {{qn['fill'][j]}}\n              <span *ngIf=\"option.option !== qn['fill'][j]\">\n                 <i class=\"fa fa-times-circle right-align\"\n                    style=\"color: red; position: absolute; right: 135px\">\n                    incorrect answer</i>\n              </span>\n            </a>\n          </ng-container>\n        </p>\n      </div>\n    </div>\n    <br>\n  </ng-container>\n</div>\n\n<div *ngIf=\"!questions.qns\"\n     style=\"margin-bottom: 302px; margin-left: 20px; text-align: center; margin-top: 50px\">\n  <i class=\"fa fa-exclamation-triangle fa-4x\" style=\"color: red\"></i>\n  <h3>You need to finish the QCM</h3>\n</div>\n","<div *ngIf=\"question.qns\">\n  <div class=\"col s6\">\n\n    <!-- Time elapsed -->\n    <div class=\"container\" style=\"width: 16rem;\">\n      <div class=\"row justify-content-center\">\n        <div class=\"card \">\n          <div class=\"card-body\">\n              <span class=\"text-monospace font-italic font-weight-bolder\"\n                style=\"color: green; text-align: center\">\n                <i class=\"fa fa-clock-o\" aria-hidden=\"true\" style=\"color: #0c1722\"></i>\n                  Time Elapsed : {{question.displayTimeElapsed()}}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Questions progress bar title -->\n    <div class=\"col-9 mx-auto\">\n      <div class=\"d-flex justify-content-between\">\n        <div>\n          <h5 class=\"text-monospace font-italic font-weight-bolder\">Question Progress</h5>\n        </div>\n        <div>\n          <h5 class=\"text-monospace font-italic font-weight-bolder\">\n            {{question.qnProgress + 1}}/{{(question.qns).length}}\n          </h5>\n        </div>\n      </div>\n    </div>\n\n    <!-- Questions progress bar -->\n    <div class=\"progress col-9 mx-auto\">\n      <div class=\"progress-bar progress-bar-success progress-bar-striped active\"\n           [ngStyle]=\"{'width.%':(question.qnProgress)*10}\" >\n        {{(question.qnProgress) * 10}}%\n      </div>\n    </div>\n    <br>\n\n    <!-- Question card -->\n    <div class=\"col-10 justify-content-center mx-auto\">\n      <div class=\"card\" style=\"background-color: #31373e\">\n\n        <!-- Question title -->\n        <div class=\"card-content\">\n          <p class=\"card-title ml-3 mt-4 text-monospace font-italic font-weight-bolder\"\n             style=\"color: white\">Question\n            {{(question.qnProgress + 1)}} :</p>\n          <h5>\n            <p class=\"ml-3\" style=\"color: white\">\n              <strong>{{question.qns[question.qnProgress].question}}</strong>\n            </p>\n          </h5>\n        </div>\n\n        <!-- Questions of type fill in -->\n        <div *ngIf=\"question.qns[question.qnProgress].type === 'fill in'\"\n             class=\"card ml-3 mb-3 mr-3\" style=\"margin: 10px;\"> {{onChangeTickets()}}\n          <p class=\"list-group list-group-flush\">\n\n            <!-- Loop through all questions of type fill in -->\n            <ng-container *ngFor=\"let group of getInputs.controls; let i = index\">\n\n              <!-- inputs groups for questions of type fill in -->\n              <div [formGroup]=\"group\" class=\"list-group-item list-group-item-action\">\n\n                <!-- inputs number for questions of type fill in -->\n                <label for=\"{{i}}\">({{i + 1 }})</label>\n\n                <!-- inputs for questions of type fill in -->\n                <input type=\"text\" id=\"{{i}}\" formControlName=\"name\"\n                       class=\"form-control\"\n                       [class.is-invalid]=\"group['controls'].name.invalid &&\n                         group['controls'].name.touched\"\n                       [class.is-valid]=\"!(group['controls'].name.invalid &&\n                         group['controls'].name['untouched'])\">\n\n                <!-- input error message for questions of type fill in -->\n                <small class=\"text-danger\" style=\"float: left\"\n                       [class.d-none]=\"group['controls'].name.valid ||\n                     group['controls'].name['untouched']\">\n                  <i style=\"color: red\" class=\"fa fa-exclamation-circle\"\n                     aria-hidden=\"true\"></i>\n                    An answer required here\n                </small>\n              </div>\n            </ng-container>\n          </p>\n\n          <br>\n\n          <!-- Next button for questions of type fill in -->\n          <div class=\"btn-toolbar row mx-auto\" role=\"toolbar\"\n               aria-label=\"Toolbar with button groups\">\n            <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\n              <button (click)=\"test1()\" type=\"button\"\n                      class=\"btn btn-outline-success\">prev\n              </button>\n            </div>\n            <div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Second group\">\n              <button (click)=\"test()\" type=\"button\" class=\"btn btn-outline-info\"\n                      [disabled]=\"getInputs.invalid\">next\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Questions of type multiple or boolean -->\n        <div *ngIf=\"question.qns[question.qnProgress].type !== 'fill in'\"\n             class=\"card\" style=\"margin: 10px;\">\n          <a class=\"list-group list-group-flush\">\n\n            <!-- Loop through all questions of multiple or boolean -->\n            <ng-container\n              *ngFor=\"let option of question.qns[question.qnProgress]['answers'];\n              let i = index\">\n\n              <!-- Style of possible answers -->\n              <a *ngIf=\"option != null \"\n                 class=\"list-group-item list-group-item-action\"\n                 onmousemove=\"this.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n                      this.style.color='green'; this.style.fontSize= '1.8vh';\"\n                 onmouseout=\"this.style.backgroundColor = ''; this.style.color='';\n                  this.style.fontSize= '';\"\n                 style=\"cursor:pointer; \"\n                 (click)=\"answer(i,\n                option['isCorrect'])\">\n                {{option.option}}\n              </a>\n            </ng-container>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<br>\n<br>\n\n\n\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"@app/core/services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {FormBuilder, FormGroup, FormArray, Validators} from '@angular/forms';\nimport {QuestionsService} from \"@app/core/services/questions.service\";\nimport {ReplacePipe} from \"@app/shared/pipes/replace.pipe\";\nimport {EToastSeverities, ToastService} from \"@app/core/services/toast.service\";\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.css']\n})\n\nexport class QuestionsComponent implements OnInit {\n\n  option: any;\n  progress: number = 0;\n  compArray: boolean;\n  dynamicInputsForm: FormGroup;\n  tab: Array<number> = [];\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    public toastService: ToastService,\n    public question: QuestionsService,\n    private replacePipe: ReplacePipe,\n    private formBuilder: FormBuilder\n  ) {\n  }\n\n  ngOnInit() {\n\n    this.dynamicInputsForm = this.formBuilder.group({\n      inputs: new FormArray([])\n    });\n\n    this.question.qnProgress = 0;\n    this.question.seconds = 0;\n    this.showQuestion();\n    this.startTimer();\n\n    if (!Object.keys(localStorage).includes('id_token')) {\n      this.toastService.show(EToastSeverities.INFO, 'Redirected to login page !');\n      this.router.navigate(['/login']);\n    }\n  }\n\n  showQuestion() {\n    this.question.getQuestions()\n      .toPromise()\n      .then((data: any) => {\n\n        data.filter(x => x.type === 'fill in')\n          .forEach(x => {\n            x.regexAnswer = this.question.getAnswer(x.question);\n            x.question = this.replacePipe.transform(x.question);\n            this.tab.push(x.regexAnswer.length);\n          });\n\n        data.forEach((x, i) => {\n          x.questionNumber = ++i;\n        });\n\n        this.question.qns = data;\n        this.question.correctAnswerCount = 0;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  get getDynamicInputsForm() {\n    return this.dynamicInputsForm.controls;\n  }\n\n  get getInputs() {\n    return this.getDynamicInputsForm.inputs as FormArray;\n  }\n\n  onChangeTickets() {\n    const numberOfInputs = this.tab[this.progress] || 0;\n    if (this.getInputs.length < numberOfInputs) {\n      for (let i = this.getInputs.length; i < numberOfInputs; i++) {\n        this.getInputs.push(this.formBuilder.group({\n          name: ['', Validators.required]\n        }));\n      }\n\n    } else {\n      for (let i = this.getInputs.length; i >= numberOfInputs; i--) {\n        this.getInputs.removeAt(i);\n      }\n    }\n  }\n\n  async test() {\n\n    let t: Array<string> = [];\n    let t1: Array<string> = [];\n\n    Object.keys(this.dynamicInputsForm.value)\n      .forEach(x => (this.dynamicInputsForm.value[x])\n        .forEach(y => t.push((y.name).toLocaleLowerCase())));\n\n    this.question.qns[this.question.qnProgress].fill = t;\n\n    this.question.qns[this.question.qnProgress].answers\n      .forEach(x => t1.push(x.option));\n\n    (this.compareTwoArray(t, t1)) ? this.question.correctAnswerCount++ : undefined;\n\n    this.question.qnProgress++;\n    this.progress++;\n\n    if (this.question.qnProgress == (this.question.qns).length) {\n      this.question.timeTaken = this.question.displayTimeElapsed();\n      clearInterval(this.question.timer);\n      await this.router.navigate(['/results']);\n    }\n  }\n\n  test1() {\n    this.question.qnProgress--;\n    this.progress--;\n  }\n\n  private compareTwoArray(t1: Array<string>, t2: Array<string>): boolean {\n    let tab: Array<string> = t1.filter(x => t2.includes(x));\n    return tab.length === t1.length;\n  }\n\n  startTimer() {\n    this.question.timer = setInterval(() => {\n      this.question.seconds++;\n      localStorage.setItem('seconds', this.question.seconds.toString());\n    }, 1000);\n  }\n\n  async answer(index, choice) {\n    this.question.qns[this.question.qnProgress].answer = choice;\n    this.question.qns[this.question.qnProgress].index = index;\n\n    if (JSON.parse(this.question.qns[this.question.qnProgress].answer\n      || this.compArray)) {\n      this.question.correctAnswerCount++;\n    }\n\n    /**\n     * if (JSON.parse(choice.toLowerCase())) {\n      this._flashMessagesService.show(\"correct answer\", {\n        cssClass: \"alert-success w-25 text-center\",\n        timeout: 2000\n      });\n    } else {\n      this._flashMessagesService.show(\"wrong answer\", {\n        cssClass: \"alert-danger w-25 text-center\",\n        timeout: 2000,\n      });\n    }\n     await new Promise(r => setTimeout(r, 2000));\n     */\n\n    this.question.qnProgress++;\n    if (this.question.qnProgress == (this.question.qns).length) {\n      this.question.timeTaken = this.question.displayTimeElapsed();\n      clearInterval(this.question.timer);\n      await this.router.navigate(['/results']);\n    }\n  }\n}\n"]}